// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	cartstorage "route256.ozon.ru/project/cart/internal/repository/cart_storage"

	mock "github.com/stretchr/testify/mock"
)

// StorageMock is an autogenerated mock type for the StorageMock type
type StorageMock struct {
	mock.Mock
}

type StorageMock_Expecter struct {
	mock *mock.Mock
}

func (_m *StorageMock) EXPECT() *StorageMock_Expecter {
	return &StorageMock_Expecter{mock: &_m.Mock}
}

// AddItem provides a mock function with given fields: ctx, userID, skuID, quantity
func (_m *StorageMock) AddItem(ctx context.Context, userID int64, skuID int64, quantity uint16) error {
	ret := _m.Called(ctx, userID, skuID, quantity)

	if len(ret) == 0 {
		panic("no return value specified for AddItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, uint16) error); ok {
		r0 = rf(ctx, userID, skuID, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageMock_AddItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddItem'
type StorageMock_AddItem_Call struct {
	*mock.Call
}

// AddItem is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - skuID int64
//   - quantity uint16
func (_e *StorageMock_Expecter) AddItem(ctx interface{}, userID interface{}, skuID interface{}, quantity interface{}) *StorageMock_AddItem_Call {
	return &StorageMock_AddItem_Call{Call: _e.mock.On("AddItem", ctx, userID, skuID, quantity)}
}

func (_c *StorageMock_AddItem_Call) Run(run func(ctx context.Context, userID int64, skuID int64, quantity uint16)) *StorageMock_AddItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(uint16))
	})
	return _c
}

func (_c *StorageMock_AddItem_Call) Return(_a0 error) *StorageMock_AddItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageMock_AddItem_Call) RunAndReturn(run func(context.Context, int64, int64, uint16) error) *StorageMock_AddItem_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteItem provides a mock function with given fields: ctx, userID, skuID
func (_m *StorageMock) DeleteItem(ctx context.Context, userID int64, skuID int64) error {
	ret := _m.Called(ctx, userID, skuID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, skuID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageMock_DeleteItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteItem'
type StorageMock_DeleteItem_Call struct {
	*mock.Call
}

// DeleteItem is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - skuID int64
func (_e *StorageMock_Expecter) DeleteItem(ctx interface{}, userID interface{}, skuID interface{}) *StorageMock_DeleteItem_Call {
	return &StorageMock_DeleteItem_Call{Call: _e.mock.On("DeleteItem", ctx, userID, skuID)}
}

func (_c *StorageMock_DeleteItem_Call) Run(run func(ctx context.Context, userID int64, skuID int64)) *StorageMock_DeleteItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *StorageMock_DeleteItem_Call) Return(_a0 error) *StorageMock_DeleteItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageMock_DeleteItem_Call) RunAndReturn(run func(context.Context, int64, int64) error) *StorageMock_DeleteItem_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteItemsByUserID provides a mock function with given fields: ctx, userID
func (_m *StorageMock) DeleteItemsByUserID(ctx context.Context, userID int64) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItemsByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageMock_DeleteItemsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteItemsByUserID'
type StorageMock_DeleteItemsByUserID_Call struct {
	*mock.Call
}

// DeleteItemsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *StorageMock_Expecter) DeleteItemsByUserID(ctx interface{}, userID interface{}) *StorageMock_DeleteItemsByUserID_Call {
	return &StorageMock_DeleteItemsByUserID_Call{Call: _e.mock.On("DeleteItemsByUserID", ctx, userID)}
}

func (_c *StorageMock_DeleteItemsByUserID_Call) Run(run func(ctx context.Context, userID int64)) *StorageMock_DeleteItemsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *StorageMock_DeleteItemsByUserID_Call) Return(_a0 error) *StorageMock_DeleteItemsByUserID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageMock_DeleteItemsByUserID_Call) RunAndReturn(run func(context.Context, int64) error) *StorageMock_DeleteItemsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetItemsByUserID provides a mock function with given fields: ctx, userID
func (_m *StorageMock) GetItemsByUserID(ctx context.Context, userID int64) (*cartstorage.Cart, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetItemsByUserID")
	}

	var r0 *cartstorage.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*cartstorage.Cart, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *cartstorage.Cart); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cartstorage.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageMock_GetItemsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemsByUserID'
type StorageMock_GetItemsByUserID_Call struct {
	*mock.Call
}

// GetItemsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *StorageMock_Expecter) GetItemsByUserID(ctx interface{}, userID interface{}) *StorageMock_GetItemsByUserID_Call {
	return &StorageMock_GetItemsByUserID_Call{Call: _e.mock.On("GetItemsByUserID", ctx, userID)}
}

func (_c *StorageMock_GetItemsByUserID_Call) Run(run func(ctx context.Context, userID int64)) *StorageMock_GetItemsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *StorageMock_GetItemsByUserID_Call) Return(_a0 *cartstorage.Cart, _a1 error) *StorageMock_GetItemsByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageMock_GetItemsByUserID_Call) RunAndReturn(run func(context.Context, int64) (*cartstorage.Cart, error)) *StorageMock_GetItemsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields:
func (_m *StorageMock) Reset() {
	_m.Called()
}

// StorageMock_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type StorageMock_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *StorageMock_Expecter) Reset() *StorageMock_Reset_Call {
	return &StorageMock_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *StorageMock_Reset_Call) Run(run func()) *StorageMock_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StorageMock_Reset_Call) Return() *StorageMock_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *StorageMock_Reset_Call) RunAndReturn(run func()) *StorageMock_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorageMock creates a new instance of StorageMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageMock {
	mock := &StorageMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
