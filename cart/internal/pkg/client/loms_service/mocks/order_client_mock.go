package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/emptypb"
	"route256.ozon.ru/project/cart/internal/pb/api/order/v1"
)

// OrderClientMockMock implements lomsservice.OrderClientMock
type OrderClientMockMock struct {
	t minimock.Tester

	funcCancel          func(ctx context.Context, in *order.OrderCancelRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error)
	inspectFuncCancel   func(ctx context.Context, in *order.OrderCancelRequest, opts ...grpc.CallOption)
	afterCancelCounter  uint64
	beforeCancelCounter uint64
	CancelMock          mOrderClientMockMockCancel

	funcCreate          func(ctx context.Context, in *order.OrderCreateRequest, opts ...grpc.CallOption) (op1 *order.OrderCreateResponse, err error)
	inspectFuncCreate   func(ctx context.Context, in *order.OrderCreateRequest, opts ...grpc.CallOption)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mOrderClientMockMockCreate

	funcInfo          func(ctx context.Context, in *order.OrderInfoRequest, opts ...grpc.CallOption) (op1 *order.OrderInfoResponse, err error)
	inspectFuncInfo   func(ctx context.Context, in *order.OrderInfoRequest, opts ...grpc.CallOption)
	afterInfoCounter  uint64
	beforeInfoCounter uint64
	InfoMock          mOrderClientMockMockInfo

	funcPay          func(ctx context.Context, in *order.OrderPayRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error)
	inspectFuncPay   func(ctx context.Context, in *order.OrderPayRequest, opts ...grpc.CallOption)
	afterPayCounter  uint64
	beforePayCounter uint64
	PayMock          mOrderClientMockMockPay
}

// NewOrderClientMockMock returns a mock for lomsservice.OrderClientMock
func NewOrderClientMockMock(t minimock.Tester) *OrderClientMockMock {
	m := &OrderClientMockMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CancelMock = mOrderClientMockMockCancel{mock: m}
	m.CancelMock.callArgs = []*OrderClientMockMockCancelParams{}

	m.CreateMock = mOrderClientMockMockCreate{mock: m}
	m.CreateMock.callArgs = []*OrderClientMockMockCreateParams{}

	m.InfoMock = mOrderClientMockMockInfo{mock: m}
	m.InfoMock.callArgs = []*OrderClientMockMockInfoParams{}

	m.PayMock = mOrderClientMockMockPay{mock: m}
	m.PayMock.callArgs = []*OrderClientMockMockPayParams{}

	return m
}

type mOrderClientMockMockCancel struct {
	mock               *OrderClientMockMock
	defaultExpectation *OrderClientMockMockCancelExpectation
	expectations       []*OrderClientMockMockCancelExpectation

	callArgs []*OrderClientMockMockCancelParams
	mutex    sync.RWMutex
}

// OrderClientMockMockCancelExpectation specifies expectation struct of the OrderClientMock.Cancel
type OrderClientMockMockCancelExpectation struct {
	mock    *OrderClientMockMock
	params  *OrderClientMockMockCancelParams
	results *OrderClientMockMockCancelResults
	Counter uint64
}

// OrderClientMockMockCancelParams contains parameters of the OrderClientMock.Cancel
type OrderClientMockMockCancelParams struct {
	ctx  context.Context
	in   *order.OrderCancelRequest
	opts []grpc.CallOption
}

// OrderClientMockMockCancelResults contains results of the OrderClientMock.Cancel
type OrderClientMockMockCancelResults struct {
	ep1 *emptypb.Empty
	err error
}

// Expect sets up expected params for OrderClientMock.Cancel
func (mmCancel *mOrderClientMockMockCancel) Expect(ctx context.Context, in *order.OrderCancelRequest, opts ...grpc.CallOption) *mOrderClientMockMockCancel {
	if mmCancel.mock.funcCancel != nil {
		mmCancel.mock.t.Fatalf("OrderClientMockMock.Cancel mock is already set by Set")
	}

	if mmCancel.defaultExpectation == nil {
		mmCancel.defaultExpectation = &OrderClientMockMockCancelExpectation{}
	}

	mmCancel.defaultExpectation.params = &OrderClientMockMockCancelParams{ctx, in, opts}
	for _, e := range mmCancel.expectations {
		if minimock.Equal(e.params, mmCancel.defaultExpectation.params) {
			mmCancel.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCancel.defaultExpectation.params)
		}
	}

	return mmCancel
}

// Inspect accepts an inspector function that has same arguments as the OrderClientMock.Cancel
func (mmCancel *mOrderClientMockMockCancel) Inspect(f func(ctx context.Context, in *order.OrderCancelRequest, opts ...grpc.CallOption)) *mOrderClientMockMockCancel {
	if mmCancel.mock.inspectFuncCancel != nil {
		mmCancel.mock.t.Fatalf("Inspect function is already set for OrderClientMockMock.Cancel")
	}

	mmCancel.mock.inspectFuncCancel = f

	return mmCancel
}

// Return sets up results that will be returned by OrderClientMock.Cancel
func (mmCancel *mOrderClientMockMockCancel) Return(ep1 *emptypb.Empty, err error) *OrderClientMockMock {
	if mmCancel.mock.funcCancel != nil {
		mmCancel.mock.t.Fatalf("OrderClientMockMock.Cancel mock is already set by Set")
	}

	if mmCancel.defaultExpectation == nil {
		mmCancel.defaultExpectation = &OrderClientMockMockCancelExpectation{mock: mmCancel.mock}
	}
	mmCancel.defaultExpectation.results = &OrderClientMockMockCancelResults{ep1, err}
	return mmCancel.mock
}

// Set uses given function f to mock the OrderClientMock.Cancel method
func (mmCancel *mOrderClientMockMockCancel) Set(f func(ctx context.Context, in *order.OrderCancelRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error)) *OrderClientMockMock {
	if mmCancel.defaultExpectation != nil {
		mmCancel.mock.t.Fatalf("Default expectation is already set for the OrderClientMock.Cancel method")
	}

	if len(mmCancel.expectations) > 0 {
		mmCancel.mock.t.Fatalf("Some expectations are already set for the OrderClientMock.Cancel method")
	}

	mmCancel.mock.funcCancel = f
	return mmCancel.mock
}

// When sets expectation for the OrderClientMock.Cancel which will trigger the result defined by the following
// Then helper
func (mmCancel *mOrderClientMockMockCancel) When(ctx context.Context, in *order.OrderCancelRequest, opts ...grpc.CallOption) *OrderClientMockMockCancelExpectation {
	if mmCancel.mock.funcCancel != nil {
		mmCancel.mock.t.Fatalf("OrderClientMockMock.Cancel mock is already set by Set")
	}

	expectation := &OrderClientMockMockCancelExpectation{
		mock:   mmCancel.mock,
		params: &OrderClientMockMockCancelParams{ctx, in, opts},
	}
	mmCancel.expectations = append(mmCancel.expectations, expectation)
	return expectation
}

// Then sets up OrderClientMock.Cancel return parameters for the expectation previously defined by the When method
func (e *OrderClientMockMockCancelExpectation) Then(ep1 *emptypb.Empty, err error) *OrderClientMockMock {
	e.results = &OrderClientMockMockCancelResults{ep1, err}
	return e.mock
}

// Cancel implements lomsservice.OrderClientMock
func (mmCancel *OrderClientMockMock) Cancel(ctx context.Context, in *order.OrderCancelRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error) {
	mm_atomic.AddUint64(&mmCancel.beforeCancelCounter, 1)
	defer mm_atomic.AddUint64(&mmCancel.afterCancelCounter, 1)

	if mmCancel.inspectFuncCancel != nil {
		mmCancel.inspectFuncCancel(ctx, in, opts...)
	}

	mm_params := &OrderClientMockMockCancelParams{ctx, in, opts}

	// Record call args
	mmCancel.CancelMock.mutex.Lock()
	mmCancel.CancelMock.callArgs = append(mmCancel.CancelMock.callArgs, mm_params)
	mmCancel.CancelMock.mutex.Unlock()

	for _, e := range mmCancel.CancelMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmCancel.CancelMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCancel.CancelMock.defaultExpectation.Counter, 1)
		mm_want := mmCancel.CancelMock.defaultExpectation.params
		mm_got := OrderClientMockMockCancelParams{ctx, in, opts}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCancel.t.Errorf("OrderClientMockMock.Cancel got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCancel.CancelMock.defaultExpectation.results
		if mm_results == nil {
			mmCancel.t.Fatal("No results are set for the OrderClientMockMock.Cancel")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmCancel.funcCancel != nil {
		return mmCancel.funcCancel(ctx, in, opts...)
	}
	mmCancel.t.Fatalf("Unexpected call to OrderClientMockMock.Cancel. %v %v %v", ctx, in, opts)
	return
}

// CancelAfterCounter returns a count of finished OrderClientMockMock.Cancel invocations
func (mmCancel *OrderClientMockMock) CancelAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCancel.afterCancelCounter)
}

// CancelBeforeCounter returns a count of OrderClientMockMock.Cancel invocations
func (mmCancel *OrderClientMockMock) CancelBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCancel.beforeCancelCounter)
}

// Calls returns a list of arguments used in each call to OrderClientMockMock.Cancel.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCancel *mOrderClientMockMockCancel) Calls() []*OrderClientMockMockCancelParams {
	mmCancel.mutex.RLock()

	argCopy := make([]*OrderClientMockMockCancelParams, len(mmCancel.callArgs))
	copy(argCopy, mmCancel.callArgs)

	mmCancel.mutex.RUnlock()

	return argCopy
}

// MinimockCancelDone returns true if the count of the Cancel invocations corresponds
// the number of defined expectations
func (m *OrderClientMockMock) MinimockCancelDone() bool {
	for _, e := range m.CancelMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CancelMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCancelCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCancel != nil && mm_atomic.LoadUint64(&m.afterCancelCounter) < 1 {
		return false
	}
	return true
}

// MinimockCancelInspect logs each unmet expectation
func (m *OrderClientMockMock) MinimockCancelInspect() {
	for _, e := range m.CancelMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderClientMockMock.Cancel with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CancelMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCancelCounter) < 1 {
		if m.CancelMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderClientMockMock.Cancel")
		} else {
			m.t.Errorf("Expected call to OrderClientMockMock.Cancel with params: %#v", *m.CancelMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCancel != nil && mm_atomic.LoadUint64(&m.afterCancelCounter) < 1 {
		m.t.Error("Expected call to OrderClientMockMock.Cancel")
	}
}

type mOrderClientMockMockCreate struct {
	mock               *OrderClientMockMock
	defaultExpectation *OrderClientMockMockCreateExpectation
	expectations       []*OrderClientMockMockCreateExpectation

	callArgs []*OrderClientMockMockCreateParams
	mutex    sync.RWMutex
}

// OrderClientMockMockCreateExpectation specifies expectation struct of the OrderClientMock.Create
type OrderClientMockMockCreateExpectation struct {
	mock    *OrderClientMockMock
	params  *OrderClientMockMockCreateParams
	results *OrderClientMockMockCreateResults
	Counter uint64
}

// OrderClientMockMockCreateParams contains parameters of the OrderClientMock.Create
type OrderClientMockMockCreateParams struct {
	ctx  context.Context
	in   *order.OrderCreateRequest
	opts []grpc.CallOption
}

// OrderClientMockMockCreateResults contains results of the OrderClientMock.Create
type OrderClientMockMockCreateResults struct {
	op1 *order.OrderCreateResponse
	err error
}

// Expect sets up expected params for OrderClientMock.Create
func (mmCreate *mOrderClientMockMockCreate) Expect(ctx context.Context, in *order.OrderCreateRequest, opts ...grpc.CallOption) *mOrderClientMockMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("OrderClientMockMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &OrderClientMockMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &OrderClientMockMockCreateParams{ctx, in, opts}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the OrderClientMock.Create
func (mmCreate *mOrderClientMockMockCreate) Inspect(f func(ctx context.Context, in *order.OrderCreateRequest, opts ...grpc.CallOption)) *mOrderClientMockMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for OrderClientMockMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by OrderClientMock.Create
func (mmCreate *mOrderClientMockMockCreate) Return(op1 *order.OrderCreateResponse, err error) *OrderClientMockMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("OrderClientMockMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &OrderClientMockMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &OrderClientMockMockCreateResults{op1, err}
	return mmCreate.mock
}

// Set uses given function f to mock the OrderClientMock.Create method
func (mmCreate *mOrderClientMockMockCreate) Set(f func(ctx context.Context, in *order.OrderCreateRequest, opts ...grpc.CallOption) (op1 *order.OrderCreateResponse, err error)) *OrderClientMockMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the OrderClientMock.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the OrderClientMock.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the OrderClientMock.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mOrderClientMockMockCreate) When(ctx context.Context, in *order.OrderCreateRequest, opts ...grpc.CallOption) *OrderClientMockMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("OrderClientMockMock.Create mock is already set by Set")
	}

	expectation := &OrderClientMockMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &OrderClientMockMockCreateParams{ctx, in, opts},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up OrderClientMock.Create return parameters for the expectation previously defined by the When method
func (e *OrderClientMockMockCreateExpectation) Then(op1 *order.OrderCreateResponse, err error) *OrderClientMockMock {
	e.results = &OrderClientMockMockCreateResults{op1, err}
	return e.mock
}

// Create implements lomsservice.OrderClientMock
func (mmCreate *OrderClientMockMock) Create(ctx context.Context, in *order.OrderCreateRequest, opts ...grpc.CallOption) (op1 *order.OrderCreateResponse, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, in, opts...)
	}

	mm_params := &OrderClientMockMockCreateParams{ctx, in, opts}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := OrderClientMockMockCreateParams{ctx, in, opts}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("OrderClientMockMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the OrderClientMockMock.Create")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, in, opts...)
	}
	mmCreate.t.Fatalf("Unexpected call to OrderClientMockMock.Create. %v %v %v", ctx, in, opts)
	return
}

// CreateAfterCounter returns a count of finished OrderClientMockMock.Create invocations
func (mmCreate *OrderClientMockMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of OrderClientMockMock.Create invocations
func (mmCreate *OrderClientMockMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to OrderClientMockMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mOrderClientMockMockCreate) Calls() []*OrderClientMockMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*OrderClientMockMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *OrderClientMockMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *OrderClientMockMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderClientMockMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderClientMockMock.Create")
		} else {
			m.t.Errorf("Expected call to OrderClientMockMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to OrderClientMockMock.Create")
	}
}

type mOrderClientMockMockInfo struct {
	mock               *OrderClientMockMock
	defaultExpectation *OrderClientMockMockInfoExpectation
	expectations       []*OrderClientMockMockInfoExpectation

	callArgs []*OrderClientMockMockInfoParams
	mutex    sync.RWMutex
}

// OrderClientMockMockInfoExpectation specifies expectation struct of the OrderClientMock.Info
type OrderClientMockMockInfoExpectation struct {
	mock    *OrderClientMockMock
	params  *OrderClientMockMockInfoParams
	results *OrderClientMockMockInfoResults
	Counter uint64
}

// OrderClientMockMockInfoParams contains parameters of the OrderClientMock.Info
type OrderClientMockMockInfoParams struct {
	ctx  context.Context
	in   *order.OrderInfoRequest
	opts []grpc.CallOption
}

// OrderClientMockMockInfoResults contains results of the OrderClientMock.Info
type OrderClientMockMockInfoResults struct {
	op1 *order.OrderInfoResponse
	err error
}

// Expect sets up expected params for OrderClientMock.Info
func (mmInfo *mOrderClientMockMockInfo) Expect(ctx context.Context, in *order.OrderInfoRequest, opts ...grpc.CallOption) *mOrderClientMockMockInfo {
	if mmInfo.mock.funcInfo != nil {
		mmInfo.mock.t.Fatalf("OrderClientMockMock.Info mock is already set by Set")
	}

	if mmInfo.defaultExpectation == nil {
		mmInfo.defaultExpectation = &OrderClientMockMockInfoExpectation{}
	}

	mmInfo.defaultExpectation.params = &OrderClientMockMockInfoParams{ctx, in, opts}
	for _, e := range mmInfo.expectations {
		if minimock.Equal(e.params, mmInfo.defaultExpectation.params) {
			mmInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmInfo.defaultExpectation.params)
		}
	}

	return mmInfo
}

// Inspect accepts an inspector function that has same arguments as the OrderClientMock.Info
func (mmInfo *mOrderClientMockMockInfo) Inspect(f func(ctx context.Context, in *order.OrderInfoRequest, opts ...grpc.CallOption)) *mOrderClientMockMockInfo {
	if mmInfo.mock.inspectFuncInfo != nil {
		mmInfo.mock.t.Fatalf("Inspect function is already set for OrderClientMockMock.Info")
	}

	mmInfo.mock.inspectFuncInfo = f

	return mmInfo
}

// Return sets up results that will be returned by OrderClientMock.Info
func (mmInfo *mOrderClientMockMockInfo) Return(op1 *order.OrderInfoResponse, err error) *OrderClientMockMock {
	if mmInfo.mock.funcInfo != nil {
		mmInfo.mock.t.Fatalf("OrderClientMockMock.Info mock is already set by Set")
	}

	if mmInfo.defaultExpectation == nil {
		mmInfo.defaultExpectation = &OrderClientMockMockInfoExpectation{mock: mmInfo.mock}
	}
	mmInfo.defaultExpectation.results = &OrderClientMockMockInfoResults{op1, err}
	return mmInfo.mock
}

// Set uses given function f to mock the OrderClientMock.Info method
func (mmInfo *mOrderClientMockMockInfo) Set(f func(ctx context.Context, in *order.OrderInfoRequest, opts ...grpc.CallOption) (op1 *order.OrderInfoResponse, err error)) *OrderClientMockMock {
	if mmInfo.defaultExpectation != nil {
		mmInfo.mock.t.Fatalf("Default expectation is already set for the OrderClientMock.Info method")
	}

	if len(mmInfo.expectations) > 0 {
		mmInfo.mock.t.Fatalf("Some expectations are already set for the OrderClientMock.Info method")
	}

	mmInfo.mock.funcInfo = f
	return mmInfo.mock
}

// When sets expectation for the OrderClientMock.Info which will trigger the result defined by the following
// Then helper
func (mmInfo *mOrderClientMockMockInfo) When(ctx context.Context, in *order.OrderInfoRequest, opts ...grpc.CallOption) *OrderClientMockMockInfoExpectation {
	if mmInfo.mock.funcInfo != nil {
		mmInfo.mock.t.Fatalf("OrderClientMockMock.Info mock is already set by Set")
	}

	expectation := &OrderClientMockMockInfoExpectation{
		mock:   mmInfo.mock,
		params: &OrderClientMockMockInfoParams{ctx, in, opts},
	}
	mmInfo.expectations = append(mmInfo.expectations, expectation)
	return expectation
}

// Then sets up OrderClientMock.Info return parameters for the expectation previously defined by the When method
func (e *OrderClientMockMockInfoExpectation) Then(op1 *order.OrderInfoResponse, err error) *OrderClientMockMock {
	e.results = &OrderClientMockMockInfoResults{op1, err}
	return e.mock
}

// Info implements lomsservice.OrderClientMock
func (mmInfo *OrderClientMockMock) Info(ctx context.Context, in *order.OrderInfoRequest, opts ...grpc.CallOption) (op1 *order.OrderInfoResponse, err error) {
	mm_atomic.AddUint64(&mmInfo.beforeInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmInfo.afterInfoCounter, 1)

	if mmInfo.inspectFuncInfo != nil {
		mmInfo.inspectFuncInfo(ctx, in, opts...)
	}

	mm_params := &OrderClientMockMockInfoParams{ctx, in, opts}

	// Record call args
	mmInfo.InfoMock.mutex.Lock()
	mmInfo.InfoMock.callArgs = append(mmInfo.InfoMock.callArgs, mm_params)
	mmInfo.InfoMock.mutex.Unlock()

	for _, e := range mmInfo.InfoMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmInfo.InfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmInfo.InfoMock.defaultExpectation.Counter, 1)
		mm_want := mmInfo.InfoMock.defaultExpectation.params
		mm_got := OrderClientMockMockInfoParams{ctx, in, opts}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmInfo.t.Errorf("OrderClientMockMock.Info got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmInfo.InfoMock.defaultExpectation.results
		if mm_results == nil {
			mmInfo.t.Fatal("No results are set for the OrderClientMockMock.Info")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmInfo.funcInfo != nil {
		return mmInfo.funcInfo(ctx, in, opts...)
	}
	mmInfo.t.Fatalf("Unexpected call to OrderClientMockMock.Info. %v %v %v", ctx, in, opts)
	return
}

// InfoAfterCounter returns a count of finished OrderClientMockMock.Info invocations
func (mmInfo *OrderClientMockMock) InfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInfo.afterInfoCounter)
}

// InfoBeforeCounter returns a count of OrderClientMockMock.Info invocations
func (mmInfo *OrderClientMockMock) InfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInfo.beforeInfoCounter)
}

// Calls returns a list of arguments used in each call to OrderClientMockMock.Info.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmInfo *mOrderClientMockMockInfo) Calls() []*OrderClientMockMockInfoParams {
	mmInfo.mutex.RLock()

	argCopy := make([]*OrderClientMockMockInfoParams, len(mmInfo.callArgs))
	copy(argCopy, mmInfo.callArgs)

	mmInfo.mutex.RUnlock()

	return argCopy
}

// MinimockInfoDone returns true if the count of the Info invocations corresponds
// the number of defined expectations
func (m *OrderClientMockMock) MinimockInfoDone() bool {
	for _, e := range m.InfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInfoCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInfo != nil && mm_atomic.LoadUint64(&m.afterInfoCounter) < 1 {
		return false
	}
	return true
}

// MinimockInfoInspect logs each unmet expectation
func (m *OrderClientMockMock) MinimockInfoInspect() {
	for _, e := range m.InfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderClientMockMock.Info with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInfoCounter) < 1 {
		if m.InfoMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderClientMockMock.Info")
		} else {
			m.t.Errorf("Expected call to OrderClientMockMock.Info with params: %#v", *m.InfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInfo != nil && mm_atomic.LoadUint64(&m.afterInfoCounter) < 1 {
		m.t.Error("Expected call to OrderClientMockMock.Info")
	}
}

type mOrderClientMockMockPay struct {
	mock               *OrderClientMockMock
	defaultExpectation *OrderClientMockMockPayExpectation
	expectations       []*OrderClientMockMockPayExpectation

	callArgs []*OrderClientMockMockPayParams
	mutex    sync.RWMutex
}

// OrderClientMockMockPayExpectation specifies expectation struct of the OrderClientMock.Pay
type OrderClientMockMockPayExpectation struct {
	mock    *OrderClientMockMock
	params  *OrderClientMockMockPayParams
	results *OrderClientMockMockPayResults
	Counter uint64
}

// OrderClientMockMockPayParams contains parameters of the OrderClientMock.Pay
type OrderClientMockMockPayParams struct {
	ctx  context.Context
	in   *order.OrderPayRequest
	opts []grpc.CallOption
}

// OrderClientMockMockPayResults contains results of the OrderClientMock.Pay
type OrderClientMockMockPayResults struct {
	ep1 *emptypb.Empty
	err error
}

// Expect sets up expected params for OrderClientMock.Pay
func (mmPay *mOrderClientMockMockPay) Expect(ctx context.Context, in *order.OrderPayRequest, opts ...grpc.CallOption) *mOrderClientMockMockPay {
	if mmPay.mock.funcPay != nil {
		mmPay.mock.t.Fatalf("OrderClientMockMock.Pay mock is already set by Set")
	}

	if mmPay.defaultExpectation == nil {
		mmPay.defaultExpectation = &OrderClientMockMockPayExpectation{}
	}

	mmPay.defaultExpectation.params = &OrderClientMockMockPayParams{ctx, in, opts}
	for _, e := range mmPay.expectations {
		if minimock.Equal(e.params, mmPay.defaultExpectation.params) {
			mmPay.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPay.defaultExpectation.params)
		}
	}

	return mmPay
}

// Inspect accepts an inspector function that has same arguments as the OrderClientMock.Pay
func (mmPay *mOrderClientMockMockPay) Inspect(f func(ctx context.Context, in *order.OrderPayRequest, opts ...grpc.CallOption)) *mOrderClientMockMockPay {
	if mmPay.mock.inspectFuncPay != nil {
		mmPay.mock.t.Fatalf("Inspect function is already set for OrderClientMockMock.Pay")
	}

	mmPay.mock.inspectFuncPay = f

	return mmPay
}

// Return sets up results that will be returned by OrderClientMock.Pay
func (mmPay *mOrderClientMockMockPay) Return(ep1 *emptypb.Empty, err error) *OrderClientMockMock {
	if mmPay.mock.funcPay != nil {
		mmPay.mock.t.Fatalf("OrderClientMockMock.Pay mock is already set by Set")
	}

	if mmPay.defaultExpectation == nil {
		mmPay.defaultExpectation = &OrderClientMockMockPayExpectation{mock: mmPay.mock}
	}
	mmPay.defaultExpectation.results = &OrderClientMockMockPayResults{ep1, err}
	return mmPay.mock
}

// Set uses given function f to mock the OrderClientMock.Pay method
func (mmPay *mOrderClientMockMockPay) Set(f func(ctx context.Context, in *order.OrderPayRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error)) *OrderClientMockMock {
	if mmPay.defaultExpectation != nil {
		mmPay.mock.t.Fatalf("Default expectation is already set for the OrderClientMock.Pay method")
	}

	if len(mmPay.expectations) > 0 {
		mmPay.mock.t.Fatalf("Some expectations are already set for the OrderClientMock.Pay method")
	}

	mmPay.mock.funcPay = f
	return mmPay.mock
}

// When sets expectation for the OrderClientMock.Pay which will trigger the result defined by the following
// Then helper
func (mmPay *mOrderClientMockMockPay) When(ctx context.Context, in *order.OrderPayRequest, opts ...grpc.CallOption) *OrderClientMockMockPayExpectation {
	if mmPay.mock.funcPay != nil {
		mmPay.mock.t.Fatalf("OrderClientMockMock.Pay mock is already set by Set")
	}

	expectation := &OrderClientMockMockPayExpectation{
		mock:   mmPay.mock,
		params: &OrderClientMockMockPayParams{ctx, in, opts},
	}
	mmPay.expectations = append(mmPay.expectations, expectation)
	return expectation
}

// Then sets up OrderClientMock.Pay return parameters for the expectation previously defined by the When method
func (e *OrderClientMockMockPayExpectation) Then(ep1 *emptypb.Empty, err error) *OrderClientMockMock {
	e.results = &OrderClientMockMockPayResults{ep1, err}
	return e.mock
}

// Pay implements lomsservice.OrderClientMock
func (mmPay *OrderClientMockMock) Pay(ctx context.Context, in *order.OrderPayRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error) {
	mm_atomic.AddUint64(&mmPay.beforePayCounter, 1)
	defer mm_atomic.AddUint64(&mmPay.afterPayCounter, 1)

	if mmPay.inspectFuncPay != nil {
		mmPay.inspectFuncPay(ctx, in, opts...)
	}

	mm_params := &OrderClientMockMockPayParams{ctx, in, opts}

	// Record call args
	mmPay.PayMock.mutex.Lock()
	mmPay.PayMock.callArgs = append(mmPay.PayMock.callArgs, mm_params)
	mmPay.PayMock.mutex.Unlock()

	for _, e := range mmPay.PayMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmPay.PayMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPay.PayMock.defaultExpectation.Counter, 1)
		mm_want := mmPay.PayMock.defaultExpectation.params
		mm_got := OrderClientMockMockPayParams{ctx, in, opts}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPay.t.Errorf("OrderClientMockMock.Pay got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPay.PayMock.defaultExpectation.results
		if mm_results == nil {
			mmPay.t.Fatal("No results are set for the OrderClientMockMock.Pay")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmPay.funcPay != nil {
		return mmPay.funcPay(ctx, in, opts...)
	}
	mmPay.t.Fatalf("Unexpected call to OrderClientMockMock.Pay. %v %v %v", ctx, in, opts)
	return
}

// PayAfterCounter returns a count of finished OrderClientMockMock.Pay invocations
func (mmPay *OrderClientMockMock) PayAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPay.afterPayCounter)
}

// PayBeforeCounter returns a count of OrderClientMockMock.Pay invocations
func (mmPay *OrderClientMockMock) PayBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPay.beforePayCounter)
}

// Calls returns a list of arguments used in each call to OrderClientMockMock.Pay.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPay *mOrderClientMockMockPay) Calls() []*OrderClientMockMockPayParams {
	mmPay.mutex.RLock()

	argCopy := make([]*OrderClientMockMockPayParams, len(mmPay.callArgs))
	copy(argCopy, mmPay.callArgs)

	mmPay.mutex.RUnlock()

	return argCopy
}

// MinimockPayDone returns true if the count of the Pay invocations corresponds
// the number of defined expectations
func (m *OrderClientMockMock) MinimockPayDone() bool {
	for _, e := range m.PayMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PayMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPayCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPay != nil && mm_atomic.LoadUint64(&m.afterPayCounter) < 1 {
		return false
	}
	return true
}

// MinimockPayInspect logs each unmet expectation
func (m *OrderClientMockMock) MinimockPayInspect() {
	for _, e := range m.PayMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderClientMockMock.Pay with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PayMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPayCounter) < 1 {
		if m.PayMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderClientMockMock.Pay")
		} else {
			m.t.Errorf("Expected call to OrderClientMockMock.Pay with params: %#v", *m.PayMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPay != nil && mm_atomic.LoadUint64(&m.afterPayCounter) < 1 {
		m.t.Error("Expected call to OrderClientMockMock.Pay")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderClientMockMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCancelInspect()

		m.MinimockCreateInspect()

		m.MinimockInfoInspect()

		m.MinimockPayInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderClientMockMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderClientMockMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCancelDone() &&
		m.MinimockCreateDone() &&
		m.MinimockInfoDone() &&
		m.MinimockPayDone()
}
