// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	cartservice "route256.ozon.ru/project/cart/internal/pkg/client/cart_service"

	mock "github.com/stretchr/testify/mock"
)

// ClientMock is an autogenerated mock type for the ClientMock type
type ClientMock struct {
	mock.Mock
}

type ClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientMock) EXPECT() *ClientMock_Expecter {
	return &ClientMock_Expecter{mock: &_m.Mock}
}

// AddItem provides a mock function with given fields: ctx, UserID, SkuID, Quantity
func (_m *ClientMock) AddItem(ctx context.Context, UserID int64, SkuID int64, Quantity uint16) error {
	ret := _m.Called(ctx, UserID, SkuID, Quantity)

	if len(ret) == 0 {
		panic("no return value specified for AddItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, uint16) error); ok {
		r0 = rf(ctx, UserID, SkuID, Quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_AddItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddItem'
type ClientMock_AddItem_Call struct {
	*mock.Call
}

// AddItem is a helper method to define mock.On call
//   - ctx context.Context
//   - UserID int64
//   - SkuID int64
//   - Quantity uint16
func (_e *ClientMock_Expecter) AddItem(ctx interface{}, UserID interface{}, SkuID interface{}, Quantity interface{}) *ClientMock_AddItem_Call {
	return &ClientMock_AddItem_Call{Call: _e.mock.On("AddItem", ctx, UserID, SkuID, Quantity)}
}

func (_c *ClientMock_AddItem_Call) Run(run func(ctx context.Context, UserID int64, SkuID int64, Quantity uint16)) *ClientMock_AddItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(uint16))
	})
	return _c
}

func (_c *ClientMock_AddItem_Call) Return(_a0 error) *ClientMock_AddItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_AddItem_Call) RunAndReturn(run func(context.Context, int64, int64, uint16) error) *ClientMock_AddItem_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteItem provides a mock function with given fields: ctx, UserID, SkuID
func (_m *ClientMock) DeleteItem(ctx context.Context, UserID int64, SkuID int64) error {
	ret := _m.Called(ctx, UserID, SkuID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, UserID, SkuID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_DeleteItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteItem'
type ClientMock_DeleteItem_Call struct {
	*mock.Call
}

// DeleteItem is a helper method to define mock.On call
//   - ctx context.Context
//   - UserID int64
//   - SkuID int64
func (_e *ClientMock_Expecter) DeleteItem(ctx interface{}, UserID interface{}, SkuID interface{}) *ClientMock_DeleteItem_Call {
	return &ClientMock_DeleteItem_Call{Call: _e.mock.On("DeleteItem", ctx, UserID, SkuID)}
}

func (_c *ClientMock_DeleteItem_Call) Run(run func(ctx context.Context, UserID int64, SkuID int64)) *ClientMock_DeleteItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *ClientMock_DeleteItem_Call) Return(_a0 error) *ClientMock_DeleteItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_DeleteItem_Call) RunAndReturn(run func(context.Context, int64, int64) error) *ClientMock_DeleteItem_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteItemsByUserID provides a mock function with given fields: ctx, UserID
func (_m *ClientMock) DeleteItemsByUserID(ctx context.Context, UserID int64) error {
	ret := _m.Called(ctx, UserID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItemsByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, UserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_DeleteItemsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteItemsByUserID'
type ClientMock_DeleteItemsByUserID_Call struct {
	*mock.Call
}

// DeleteItemsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - UserID int64
func (_e *ClientMock_Expecter) DeleteItemsByUserID(ctx interface{}, UserID interface{}) *ClientMock_DeleteItemsByUserID_Call {
	return &ClientMock_DeleteItemsByUserID_Call{Call: _e.mock.On("DeleteItemsByUserID", ctx, UserID)}
}

func (_c *ClientMock_DeleteItemsByUserID_Call) Run(run func(ctx context.Context, UserID int64)) *ClientMock_DeleteItemsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ClientMock_DeleteItemsByUserID_Call) Return(_a0 error) *ClientMock_DeleteItemsByUserID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_DeleteItemsByUserID_Call) RunAndReturn(run func(context.Context, int64) error) *ClientMock_DeleteItemsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetItemsByUserID provides a mock function with given fields: ctx, UserID
func (_m *ClientMock) GetItemsByUserID(ctx context.Context, UserID int64) (*cartservice.GetItmesByUserIDResponse, error) {
	ret := _m.Called(ctx, UserID)

	if len(ret) == 0 {
		panic("no return value specified for GetItemsByUserID")
	}

	var r0 *cartservice.GetItmesByUserIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*cartservice.GetItmesByUserIDResponse, error)); ok {
		return rf(ctx, UserID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *cartservice.GetItmesByUserIDResponse); ok {
		r0 = rf(ctx, UserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cartservice.GetItmesByUserIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, UserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetItemsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemsByUserID'
type ClientMock_GetItemsByUserID_Call struct {
	*mock.Call
}

// GetItemsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - UserID int64
func (_e *ClientMock_Expecter) GetItemsByUserID(ctx interface{}, UserID interface{}) *ClientMock_GetItemsByUserID_Call {
	return &ClientMock_GetItemsByUserID_Call{Call: _e.mock.On("GetItemsByUserID", ctx, UserID)}
}

func (_c *ClientMock_GetItemsByUserID_Call) Run(run func(ctx context.Context, UserID int64)) *ClientMock_GetItemsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ClientMock_GetItemsByUserID_Call) Return(_a0 *cartservice.GetItmesByUserIDResponse, _a1 error) *ClientMock_GetItemsByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetItemsByUserID_Call) RunAndReturn(run func(context.Context, int64) (*cartservice.GetItmesByUserIDResponse, error)) *ClientMock_GetItemsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientMock creates a new instance of ClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientMock {
	mock := &ClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
