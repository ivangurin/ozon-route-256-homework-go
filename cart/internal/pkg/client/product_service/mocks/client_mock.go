// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	productservice "route256.ozon.ru/project/cart/internal/pkg/client/product_service"
)

// ClientMock is an autogenerated mock type for the ClientMock type
type ClientMock struct {
	mock.Mock
}

type ClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientMock) EXPECT() *ClientMock_Expecter {
	return &ClientMock_Expecter{mock: &_m.Mock}
}

// GetProduct provides a mock function with given fields: ctx, skuID
func (_m *ClientMock) GetProduct(ctx context.Context, skuID int64) (*productservice.GetProductResponse, error) {
	ret := _m.Called(ctx, skuID)

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 *productservice.GetProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*productservice.GetProductResponse, error)); ok {
		return rf(ctx, skuID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *productservice.GetProductResponse); ok {
		r0 = rf(ctx, skuID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*productservice.GetProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, skuID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProduct'
type ClientMock_GetProduct_Call struct {
	*mock.Call
}

// GetProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - skuID int64
func (_e *ClientMock_Expecter) GetProduct(ctx interface{}, skuID interface{}) *ClientMock_GetProduct_Call {
	return &ClientMock_GetProduct_Call{Call: _e.mock.On("GetProduct", ctx, skuID)}
}

func (_c *ClientMock_GetProduct_Call) Run(run func(ctx context.Context, skuID int64)) *ClientMock_GetProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ClientMock_GetProduct_Call) Return(_a0 *productservice.GetProductResponse, _a1 error) *ClientMock_GetProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetProduct_Call) RunAndReturn(run func(context.Context, int64) (*productservice.GetProductResponse, error)) *ClientMock_GetProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductWithRetries provides a mock function with given fields: ctx, skuID
func (_m *ClientMock) GetProductWithRetries(ctx context.Context, skuID int64) (*productservice.GetProductResponse, error) {
	ret := _m.Called(ctx, skuID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductWithRetries")
	}

	var r0 *productservice.GetProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*productservice.GetProductResponse, error)); ok {
		return rf(ctx, skuID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *productservice.GetProductResponse); ok {
		r0 = rf(ctx, skuID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*productservice.GetProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, skuID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_GetProductWithRetries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductWithRetries'
type ClientMock_GetProductWithRetries_Call struct {
	*mock.Call
}

// GetProductWithRetries is a helper method to define mock.On call
//   - ctx context.Context
//   - skuID int64
func (_e *ClientMock_Expecter) GetProductWithRetries(ctx interface{}, skuID interface{}) *ClientMock_GetProductWithRetries_Call {
	return &ClientMock_GetProductWithRetries_Call{Call: _e.mock.On("GetProductWithRetries", ctx, skuID)}
}

func (_c *ClientMock_GetProductWithRetries_Call) Run(run func(ctx context.Context, skuID int64)) *ClientMock_GetProductWithRetries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ClientMock_GetProductWithRetries_Call) Return(_a0 *productservice.GetProductResponse, _a1 error) *ClientMock_GetProductWithRetries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_GetProductWithRetries_Call) RunAndReturn(run func(context.Context, int64) (*productservice.GetProductResponse, error)) *ClientMock_GetProductWithRetries_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientMock creates a new instance of ClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientMock {
	mock := &ClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
