package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	mm_productservice "route256.ozon.ru/project/cart/internal/pkg/client/product_service"
)

// ClientMockMock implements productservice.ClientMock
type ClientMockMock struct {
	t minimock.Tester

	funcGetProduct          func(ctx context.Context, skuID int64) (gp1 *mm_productservice.GetProductResponse, err error)
	inspectFuncGetProduct   func(ctx context.Context, skuID int64)
	afterGetProductCounter  uint64
	beforeGetProductCounter uint64
	GetProductMock          mClientMockMockGetProduct

	funcGetProductWithRetries          func(ctx context.Context, skuID int64) (gp1 *mm_productservice.GetProductResponse, err error)
	inspectFuncGetProductWithRetries   func(ctx context.Context, skuID int64)
	afterGetProductWithRetriesCounter  uint64
	beforeGetProductWithRetriesCounter uint64
	GetProductWithRetriesMock          mClientMockMockGetProductWithRetries
}

// NewClientMockMock returns a mock for productservice.ClientMock
func NewClientMockMock(t minimock.Tester) *ClientMockMock {
	m := &ClientMockMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetProductMock = mClientMockMockGetProduct{mock: m}
	m.GetProductMock.callArgs = []*ClientMockMockGetProductParams{}

	m.GetProductWithRetriesMock = mClientMockMockGetProductWithRetries{mock: m}
	m.GetProductWithRetriesMock.callArgs = []*ClientMockMockGetProductWithRetriesParams{}

	return m
}

type mClientMockMockGetProduct struct {
	mock               *ClientMockMock
	defaultExpectation *ClientMockMockGetProductExpectation
	expectations       []*ClientMockMockGetProductExpectation

	callArgs []*ClientMockMockGetProductParams
	mutex    sync.RWMutex
}

// ClientMockMockGetProductExpectation specifies expectation struct of the ClientMock.GetProduct
type ClientMockMockGetProductExpectation struct {
	mock    *ClientMockMock
	params  *ClientMockMockGetProductParams
	results *ClientMockMockGetProductResults
	Counter uint64
}

// ClientMockMockGetProductParams contains parameters of the ClientMock.GetProduct
type ClientMockMockGetProductParams struct {
	ctx   context.Context
	skuID int64
}

// ClientMockMockGetProductResults contains results of the ClientMock.GetProduct
type ClientMockMockGetProductResults struct {
	gp1 *mm_productservice.GetProductResponse
	err error
}

// Expect sets up expected params for ClientMock.GetProduct
func (mmGetProduct *mClientMockMockGetProduct) Expect(ctx context.Context, skuID int64) *mClientMockMockGetProduct {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ClientMockMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &ClientMockMockGetProductExpectation{}
	}

	mmGetProduct.defaultExpectation.params = &ClientMockMockGetProductParams{ctx, skuID}
	for _, e := range mmGetProduct.expectations {
		if minimock.Equal(e.params, mmGetProduct.defaultExpectation.params) {
			mmGetProduct.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProduct.defaultExpectation.params)
		}
	}

	return mmGetProduct
}

// Inspect accepts an inspector function that has same arguments as the ClientMock.GetProduct
func (mmGetProduct *mClientMockMockGetProduct) Inspect(f func(ctx context.Context, skuID int64)) *mClientMockMockGetProduct {
	if mmGetProduct.mock.inspectFuncGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("Inspect function is already set for ClientMockMock.GetProduct")
	}

	mmGetProduct.mock.inspectFuncGetProduct = f

	return mmGetProduct
}

// Return sets up results that will be returned by ClientMock.GetProduct
func (mmGetProduct *mClientMockMockGetProduct) Return(gp1 *mm_productservice.GetProductResponse, err error) *ClientMockMock {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ClientMockMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &ClientMockMockGetProductExpectation{mock: mmGetProduct.mock}
	}
	mmGetProduct.defaultExpectation.results = &ClientMockMockGetProductResults{gp1, err}
	return mmGetProduct.mock
}

// Set uses given function f to mock the ClientMock.GetProduct method
func (mmGetProduct *mClientMockMockGetProduct) Set(f func(ctx context.Context, skuID int64) (gp1 *mm_productservice.GetProductResponse, err error)) *ClientMockMock {
	if mmGetProduct.defaultExpectation != nil {
		mmGetProduct.mock.t.Fatalf("Default expectation is already set for the ClientMock.GetProduct method")
	}

	if len(mmGetProduct.expectations) > 0 {
		mmGetProduct.mock.t.Fatalf("Some expectations are already set for the ClientMock.GetProduct method")
	}

	mmGetProduct.mock.funcGetProduct = f
	return mmGetProduct.mock
}

// When sets expectation for the ClientMock.GetProduct which will trigger the result defined by the following
// Then helper
func (mmGetProduct *mClientMockMockGetProduct) When(ctx context.Context, skuID int64) *ClientMockMockGetProductExpectation {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ClientMockMock.GetProduct mock is already set by Set")
	}

	expectation := &ClientMockMockGetProductExpectation{
		mock:   mmGetProduct.mock,
		params: &ClientMockMockGetProductParams{ctx, skuID},
	}
	mmGetProduct.expectations = append(mmGetProduct.expectations, expectation)
	return expectation
}

// Then sets up ClientMock.GetProduct return parameters for the expectation previously defined by the When method
func (e *ClientMockMockGetProductExpectation) Then(gp1 *mm_productservice.GetProductResponse, err error) *ClientMockMock {
	e.results = &ClientMockMockGetProductResults{gp1, err}
	return e.mock
}

// GetProduct implements productservice.ClientMock
func (mmGetProduct *ClientMockMock) GetProduct(ctx context.Context, skuID int64) (gp1 *mm_productservice.GetProductResponse, err error) {
	mm_atomic.AddUint64(&mmGetProduct.beforeGetProductCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProduct.afterGetProductCounter, 1)

	if mmGetProduct.inspectFuncGetProduct != nil {
		mmGetProduct.inspectFuncGetProduct(ctx, skuID)
	}

	mm_params := &ClientMockMockGetProductParams{ctx, skuID}

	// Record call args
	mmGetProduct.GetProductMock.mutex.Lock()
	mmGetProduct.GetProductMock.callArgs = append(mmGetProduct.GetProductMock.callArgs, mm_params)
	mmGetProduct.GetProductMock.mutex.Unlock()

	for _, e := range mmGetProduct.GetProductMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGetProduct.GetProductMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProduct.GetProductMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProduct.GetProductMock.defaultExpectation.params
		mm_got := ClientMockMockGetProductParams{ctx, skuID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProduct.t.Errorf("ClientMockMock.GetProduct got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProduct.GetProductMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProduct.t.Fatal("No results are set for the ClientMockMock.GetProduct")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGetProduct.funcGetProduct != nil {
		return mmGetProduct.funcGetProduct(ctx, skuID)
	}
	mmGetProduct.t.Fatalf("Unexpected call to ClientMockMock.GetProduct. %v %v", ctx, skuID)
	return
}

// GetProductAfterCounter returns a count of finished ClientMockMock.GetProduct invocations
func (mmGetProduct *ClientMockMock) GetProductAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProduct.afterGetProductCounter)
}

// GetProductBeforeCounter returns a count of ClientMockMock.GetProduct invocations
func (mmGetProduct *ClientMockMock) GetProductBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProduct.beforeGetProductCounter)
}

// Calls returns a list of arguments used in each call to ClientMockMock.GetProduct.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProduct *mClientMockMockGetProduct) Calls() []*ClientMockMockGetProductParams {
	mmGetProduct.mutex.RLock()

	argCopy := make([]*ClientMockMockGetProductParams, len(mmGetProduct.callArgs))
	copy(argCopy, mmGetProduct.callArgs)

	mmGetProduct.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductDone returns true if the count of the GetProduct invocations corresponds
// the number of defined expectations
func (m *ClientMockMock) MinimockGetProductDone() bool {
	for _, e := range m.GetProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProduct != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetProductInspect logs each unmet expectation
func (m *ClientMockMock) MinimockGetProductInspect() {
	for _, e := range m.GetProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ClientMockMock.GetProduct with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		if m.GetProductMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ClientMockMock.GetProduct")
		} else {
			m.t.Errorf("Expected call to ClientMockMock.GetProduct with params: %#v", *m.GetProductMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProduct != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		m.t.Error("Expected call to ClientMockMock.GetProduct")
	}
}

type mClientMockMockGetProductWithRetries struct {
	mock               *ClientMockMock
	defaultExpectation *ClientMockMockGetProductWithRetriesExpectation
	expectations       []*ClientMockMockGetProductWithRetriesExpectation

	callArgs []*ClientMockMockGetProductWithRetriesParams
	mutex    sync.RWMutex
}

// ClientMockMockGetProductWithRetriesExpectation specifies expectation struct of the ClientMock.GetProductWithRetries
type ClientMockMockGetProductWithRetriesExpectation struct {
	mock    *ClientMockMock
	params  *ClientMockMockGetProductWithRetriesParams
	results *ClientMockMockGetProductWithRetriesResults
	Counter uint64
}

// ClientMockMockGetProductWithRetriesParams contains parameters of the ClientMock.GetProductWithRetries
type ClientMockMockGetProductWithRetriesParams struct {
	ctx   context.Context
	skuID int64
}

// ClientMockMockGetProductWithRetriesResults contains results of the ClientMock.GetProductWithRetries
type ClientMockMockGetProductWithRetriesResults struct {
	gp1 *mm_productservice.GetProductResponse
	err error
}

// Expect sets up expected params for ClientMock.GetProductWithRetries
func (mmGetProductWithRetries *mClientMockMockGetProductWithRetries) Expect(ctx context.Context, skuID int64) *mClientMockMockGetProductWithRetries {
	if mmGetProductWithRetries.mock.funcGetProductWithRetries != nil {
		mmGetProductWithRetries.mock.t.Fatalf("ClientMockMock.GetProductWithRetries mock is already set by Set")
	}

	if mmGetProductWithRetries.defaultExpectation == nil {
		mmGetProductWithRetries.defaultExpectation = &ClientMockMockGetProductWithRetriesExpectation{}
	}

	mmGetProductWithRetries.defaultExpectation.params = &ClientMockMockGetProductWithRetriesParams{ctx, skuID}
	for _, e := range mmGetProductWithRetries.expectations {
		if minimock.Equal(e.params, mmGetProductWithRetries.defaultExpectation.params) {
			mmGetProductWithRetries.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProductWithRetries.defaultExpectation.params)
		}
	}

	return mmGetProductWithRetries
}

// Inspect accepts an inspector function that has same arguments as the ClientMock.GetProductWithRetries
func (mmGetProductWithRetries *mClientMockMockGetProductWithRetries) Inspect(f func(ctx context.Context, skuID int64)) *mClientMockMockGetProductWithRetries {
	if mmGetProductWithRetries.mock.inspectFuncGetProductWithRetries != nil {
		mmGetProductWithRetries.mock.t.Fatalf("Inspect function is already set for ClientMockMock.GetProductWithRetries")
	}

	mmGetProductWithRetries.mock.inspectFuncGetProductWithRetries = f

	return mmGetProductWithRetries
}

// Return sets up results that will be returned by ClientMock.GetProductWithRetries
func (mmGetProductWithRetries *mClientMockMockGetProductWithRetries) Return(gp1 *mm_productservice.GetProductResponse, err error) *ClientMockMock {
	if mmGetProductWithRetries.mock.funcGetProductWithRetries != nil {
		mmGetProductWithRetries.mock.t.Fatalf("ClientMockMock.GetProductWithRetries mock is already set by Set")
	}

	if mmGetProductWithRetries.defaultExpectation == nil {
		mmGetProductWithRetries.defaultExpectation = &ClientMockMockGetProductWithRetriesExpectation{mock: mmGetProductWithRetries.mock}
	}
	mmGetProductWithRetries.defaultExpectation.results = &ClientMockMockGetProductWithRetriesResults{gp1, err}
	return mmGetProductWithRetries.mock
}

// Set uses given function f to mock the ClientMock.GetProductWithRetries method
func (mmGetProductWithRetries *mClientMockMockGetProductWithRetries) Set(f func(ctx context.Context, skuID int64) (gp1 *mm_productservice.GetProductResponse, err error)) *ClientMockMock {
	if mmGetProductWithRetries.defaultExpectation != nil {
		mmGetProductWithRetries.mock.t.Fatalf("Default expectation is already set for the ClientMock.GetProductWithRetries method")
	}

	if len(mmGetProductWithRetries.expectations) > 0 {
		mmGetProductWithRetries.mock.t.Fatalf("Some expectations are already set for the ClientMock.GetProductWithRetries method")
	}

	mmGetProductWithRetries.mock.funcGetProductWithRetries = f
	return mmGetProductWithRetries.mock
}

// When sets expectation for the ClientMock.GetProductWithRetries which will trigger the result defined by the following
// Then helper
func (mmGetProductWithRetries *mClientMockMockGetProductWithRetries) When(ctx context.Context, skuID int64) *ClientMockMockGetProductWithRetriesExpectation {
	if mmGetProductWithRetries.mock.funcGetProductWithRetries != nil {
		mmGetProductWithRetries.mock.t.Fatalf("ClientMockMock.GetProductWithRetries mock is already set by Set")
	}

	expectation := &ClientMockMockGetProductWithRetriesExpectation{
		mock:   mmGetProductWithRetries.mock,
		params: &ClientMockMockGetProductWithRetriesParams{ctx, skuID},
	}
	mmGetProductWithRetries.expectations = append(mmGetProductWithRetries.expectations, expectation)
	return expectation
}

// Then sets up ClientMock.GetProductWithRetries return parameters for the expectation previously defined by the When method
func (e *ClientMockMockGetProductWithRetriesExpectation) Then(gp1 *mm_productservice.GetProductResponse, err error) *ClientMockMock {
	e.results = &ClientMockMockGetProductWithRetriesResults{gp1, err}
	return e.mock
}

// GetProductWithRetries implements productservice.ClientMock
func (mmGetProductWithRetries *ClientMockMock) GetProductWithRetries(ctx context.Context, skuID int64) (gp1 *mm_productservice.GetProductResponse, err error) {
	mm_atomic.AddUint64(&mmGetProductWithRetries.beforeGetProductWithRetriesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProductWithRetries.afterGetProductWithRetriesCounter, 1)

	if mmGetProductWithRetries.inspectFuncGetProductWithRetries != nil {
		mmGetProductWithRetries.inspectFuncGetProductWithRetries(ctx, skuID)
	}

	mm_params := &ClientMockMockGetProductWithRetriesParams{ctx, skuID}

	// Record call args
	mmGetProductWithRetries.GetProductWithRetriesMock.mutex.Lock()
	mmGetProductWithRetries.GetProductWithRetriesMock.callArgs = append(mmGetProductWithRetries.GetProductWithRetriesMock.callArgs, mm_params)
	mmGetProductWithRetries.GetProductWithRetriesMock.mutex.Unlock()

	for _, e := range mmGetProductWithRetries.GetProductWithRetriesMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGetProductWithRetries.GetProductWithRetriesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProductWithRetries.GetProductWithRetriesMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProductWithRetries.GetProductWithRetriesMock.defaultExpectation.params
		mm_got := ClientMockMockGetProductWithRetriesParams{ctx, skuID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProductWithRetries.t.Errorf("ClientMockMock.GetProductWithRetries got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProductWithRetries.GetProductWithRetriesMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProductWithRetries.t.Fatal("No results are set for the ClientMockMock.GetProductWithRetries")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGetProductWithRetries.funcGetProductWithRetries != nil {
		return mmGetProductWithRetries.funcGetProductWithRetries(ctx, skuID)
	}
	mmGetProductWithRetries.t.Fatalf("Unexpected call to ClientMockMock.GetProductWithRetries. %v %v", ctx, skuID)
	return
}

// GetProductWithRetriesAfterCounter returns a count of finished ClientMockMock.GetProductWithRetries invocations
func (mmGetProductWithRetries *ClientMockMock) GetProductWithRetriesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductWithRetries.afterGetProductWithRetriesCounter)
}

// GetProductWithRetriesBeforeCounter returns a count of ClientMockMock.GetProductWithRetries invocations
func (mmGetProductWithRetries *ClientMockMock) GetProductWithRetriesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductWithRetries.beforeGetProductWithRetriesCounter)
}

// Calls returns a list of arguments used in each call to ClientMockMock.GetProductWithRetries.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProductWithRetries *mClientMockMockGetProductWithRetries) Calls() []*ClientMockMockGetProductWithRetriesParams {
	mmGetProductWithRetries.mutex.RLock()

	argCopy := make([]*ClientMockMockGetProductWithRetriesParams, len(mmGetProductWithRetries.callArgs))
	copy(argCopy, mmGetProductWithRetries.callArgs)

	mmGetProductWithRetries.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductWithRetriesDone returns true if the count of the GetProductWithRetries invocations corresponds
// the number of defined expectations
func (m *ClientMockMock) MinimockGetProductWithRetriesDone() bool {
	for _, e := range m.GetProductWithRetriesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductWithRetriesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductWithRetriesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProductWithRetries != nil && mm_atomic.LoadUint64(&m.afterGetProductWithRetriesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetProductWithRetriesInspect logs each unmet expectation
func (m *ClientMockMock) MinimockGetProductWithRetriesInspect() {
	for _, e := range m.GetProductWithRetriesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ClientMockMock.GetProductWithRetries with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductWithRetriesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductWithRetriesCounter) < 1 {
		if m.GetProductWithRetriesMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ClientMockMock.GetProductWithRetries")
		} else {
			m.t.Errorf("Expected call to ClientMockMock.GetProductWithRetries with params: %#v", *m.GetProductWithRetriesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProductWithRetries != nil && mm_atomic.LoadUint64(&m.afterGetProductWithRetriesCounter) < 1 {
		m.t.Error("Expected call to ClientMockMock.GetProductWithRetries")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ClientMockMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetProductInspect()

		m.MinimockGetProductWithRetriesInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ClientMockMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ClientMockMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetProductDone() &&
		m.MinimockGetProductWithRetriesDone()
}
