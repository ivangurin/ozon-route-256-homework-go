volumes:
  postgres-data: {}

services:
  loms-service-master:
    image: bitnami/postgresql:latest
    ports:
      - 5432:5432
    environment:
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=postgres
      - POSTGRESQL_DATABASE=loms-service
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=repl_postgres
      - POSTGRESQL_REPLICATION_PASSWORD=repl_postgres
      - POSTGRESQL_SYNCHRONOUS_COMMIT_MODE=on
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
      - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
      - POSTGRESQL_LOG_HOSTNAME=true
    volumes:
      - postgres-data:/bitnami/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 5s
      retries: 5

  loms-service-sync:
    image: bitnami/postgresql:latest
    ports:
      - 5433:5432
    depends_on:
      - loms-service-master
    environment:
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=postgres
      - POSTGRESQL_DATABASE=loms-service
      - POSTGRESQL_MASTER_HOST=loms-service-master
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=repl_postgres
      - POSTGRESQL_REPLICATION_PASSWORD=repl_postgres
      - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
      - POSTGRESQL_LOG_HOSTNAME=true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 5s
      retries: 5

  # loms-service-migrate:
  #   image: golang:latest
  #   depends_on:
  #     loms-service-master:
  #       condition: service_healthy
  #   environment:
  #     - GOOSE_DRIVER=postgres
  #     - GOOSE_DBSTRING=user=postgres password=postgres dbname=loms-service host=loms-service-master port=5432 sslmode=disable
  #   volumes:
  #     - ./loms/migrations:/migrations
  #   command: "sh -c 'go install github.com/pressly/goose/v3/cmd/goose@latest && goose -dir /migrations up'"

  kafka0:
    image: confluentinc/cp-kafka:7.6.0.arm64
    ports:
      - 9092:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka0:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka0:29092,CONTROLLER://kafka0:29093,PLAINTEXT_HOST://:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka0:29093"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    healthcheck:
      test: ["CMD-SHELL", "cub kafka-ready -b kafka0:29092 1 30"]
      interval: 1s
      timeout: 5s
      retries: 10

  kafka-init-topics:
    image: confluentinc/cp-kafka:7.6.0.arm64
    depends_on:
      kafka0:
        condition: service_healthy
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
      kafka-topics --bootstrap-server kafka0:29092 --create --topic loms.order-events --partitions 2 --replication-factor 1 --if-not-exists'"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8092:8080
    depends_on:
      kafka0:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka0:29092
      DYNAMIC_CONFIG_ENABLED: "true"

  cart:
    image: cart
    build: ./cart/
    ports:
      - "8080:8080"

  loms:
    image: loms
    build: ./loms/
    ports:
      - "8180:8080"
      - "8182:8082"
    depends_on:
      loms-service-master:
        condition: service_healthy
      loms-service-sync:
        condition: service_healthy
      kafka-init-topics:
        condition: service_started
      # loms-service-migrate:
      #   condition: service_completed_successfully

  notifier:
    image: notifier
    build: ./notifier/
    depends_on:
      kafka-init-topics:
        condition: service_completed_successfully
