// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderAPIClient is the client API for OrderAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderAPIClient interface {
	Create(ctx context.Context, in *OrderCreateRequest, opts ...grpc.CallOption) (*OrderCreateResponse, error)
	Info(ctx context.Context, in *OrderInfoRequest, opts ...grpc.CallOption) (*OrderInfoResponse, error)
	Pay(ctx context.Context, in *OrderPayRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Cancel(ctx context.Context, in *OrderCancelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetByIDs(ctx context.Context, in *GetOrdersByIDsRequest, opts ...grpc.CallOption) (*GetOrdersByIDsResponse, error)
}

type orderAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderAPIClient(cc grpc.ClientConnInterface) OrderAPIClient {
	return &orderAPIClient{cc}
}

func (c *orderAPIClient) Create(ctx context.Context, in *OrderCreateRequest, opts ...grpc.CallOption) (*OrderCreateResponse, error) {
	out := new(OrderCreateResponse)
	err := c.cc.Invoke(ctx, "/route256.ozon.ru.project.loms.pkg.api.order.v1.OrderAPI/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderAPIClient) Info(ctx context.Context, in *OrderInfoRequest, opts ...grpc.CallOption) (*OrderInfoResponse, error) {
	out := new(OrderInfoResponse)
	err := c.cc.Invoke(ctx, "/route256.ozon.ru.project.loms.pkg.api.order.v1.OrderAPI/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderAPIClient) Pay(ctx context.Context, in *OrderPayRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/route256.ozon.ru.project.loms.pkg.api.order.v1.OrderAPI/Pay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderAPIClient) Cancel(ctx context.Context, in *OrderCancelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/route256.ozon.ru.project.loms.pkg.api.order.v1.OrderAPI/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderAPIClient) GetByIDs(ctx context.Context, in *GetOrdersByIDsRequest, opts ...grpc.CallOption) (*GetOrdersByIDsResponse, error) {
	out := new(GetOrdersByIDsResponse)
	err := c.cc.Invoke(ctx, "/route256.ozon.ru.project.loms.pkg.api.order.v1.OrderAPI/GetByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderAPIServer is the server API for OrderAPI service.
// All implementations must embed UnimplementedOrderAPIServer
// for forward compatibility
type OrderAPIServer interface {
	Create(context.Context, *OrderCreateRequest) (*OrderCreateResponse, error)
	Info(context.Context, *OrderInfoRequest) (*OrderInfoResponse, error)
	Pay(context.Context, *OrderPayRequest) (*emptypb.Empty, error)
	Cancel(context.Context, *OrderCancelRequest) (*emptypb.Empty, error)
	GetByIDs(context.Context, *GetOrdersByIDsRequest) (*GetOrdersByIDsResponse, error)
	mustEmbedUnimplementedOrderAPIServer()
}

// UnimplementedOrderAPIServer must be embedded to have forward compatible implementations.
type UnimplementedOrderAPIServer struct {
}

func (UnimplementedOrderAPIServer) Create(context.Context, *OrderCreateRequest) (*OrderCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrderAPIServer) Info(context.Context, *OrderInfoRequest) (*OrderInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedOrderAPIServer) Pay(context.Context, *OrderPayRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}
func (UnimplementedOrderAPIServer) Cancel(context.Context, *OrderCancelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedOrderAPIServer) GetByIDs(context.Context, *GetOrdersByIDsRequest) (*GetOrdersByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIDs not implemented")
}
func (UnimplementedOrderAPIServer) mustEmbedUnimplementedOrderAPIServer() {}

// UnsafeOrderAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderAPIServer will
// result in compilation errors.
type UnsafeOrderAPIServer interface {
	mustEmbedUnimplementedOrderAPIServer()
}

func RegisterOrderAPIServer(s grpc.ServiceRegistrar, srv OrderAPIServer) {
	s.RegisterService(&OrderAPI_ServiceDesc, srv)
}

func _OrderAPI_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderAPIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/route256.ozon.ru.project.loms.pkg.api.order.v1.OrderAPI/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderAPIServer).Create(ctx, req.(*OrderCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderAPI_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderAPIServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/route256.ozon.ru.project.loms.pkg.api.order.v1.OrderAPI/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderAPIServer).Info(ctx, req.(*OrderInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderAPI_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderPayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderAPIServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/route256.ozon.ru.project.loms.pkg.api.order.v1.OrderAPI/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderAPIServer).Pay(ctx, req.(*OrderPayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderAPI_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderAPIServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/route256.ozon.ru.project.loms.pkg.api.order.v1.OrderAPI/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderAPIServer).Cancel(ctx, req.(*OrderCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderAPI_GetByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderAPIServer).GetByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/route256.ozon.ru.project.loms.pkg.api.order.v1.OrderAPI/GetByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderAPIServer).GetByIDs(ctx, req.(*GetOrdersByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderAPI_ServiceDesc is the grpc.ServiceDesc for OrderAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "route256.ozon.ru.project.loms.pkg.api.order.v1.OrderAPI",
	HandlerType: (*OrderAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OrderAPI_Create_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _OrderAPI_Info_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _OrderAPI_Pay_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _OrderAPI_Cancel_Handler,
		},
		{
			MethodName: "GetByIDs",
			Handler:    _OrderAPI_GetByIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
