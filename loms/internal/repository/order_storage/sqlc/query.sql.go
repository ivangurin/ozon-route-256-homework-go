// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc

import (
	"context"
)

const addOrderItem = `-- name: AddOrderItem :exec
insert into order_item (order_id, sku, quantity) 
    values ($1, $2, $3)
`

type AddOrderItemParams struct {
	OrderID  int64
	Sku      int64
	Quantity int32
}

func (q *Queries) AddOrderItem(ctx context.Context, arg AddOrderItemParams) error {
	_, err := q.db.Exec(ctx, addOrderItem, arg.OrderID, arg.Sku, arg.Quantity)
	return err
}

const createOrder = `-- name: CreateOrder :one
insert into "order" ("id", "user", status, created_at, updated_at) 
    values (nextval('order_id_manual_seq') + $1, $2, $3, now(), now())
    returning id
`

type CreateOrderParams struct {
	Column1 interface{}
	User    int64
	Status  OrderStatusType
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int64, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.Column1, arg.User, arg.Status)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getOrderByID = `-- name: GetOrderByID :one
select id, "user" as user, status, created_at, updated_at 
    from "order" 
    where id = $1 limit 1
`

func (q *Queries) GetOrderByID(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.User,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderByIDs = `-- name: GetOrderByIDs :many
select id, "user" as user, status, created_at, updated_at 
    from "order" 
    where id = ANY($1::bigint[])
`

func (q *Queries) GetOrderByIDs(ctx context.Context, dollar_1 []int64) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrderByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.User,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderItemsByOrderID = `-- name: GetOrderItemsByOrderID :many
select id,  order_id, sku, quantity
    from order_item
    where order_id = $1
`

func (q *Queries) GetOrderItemsByOrderID(ctx context.Context, orderID int64) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, getOrderItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Sku,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderItemsByOrderIDs = `-- name: GetOrderItemsByOrderIDs :many
select id, order_id, sku, quantity
    from order_item
    where order_id = ANY($1::bigint[])
`

func (q *Queries) GetOrderItemsByOrderIDs(ctx context.Context, dollar_1 []int64) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, getOrderItemsByOrderIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Sku,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStatusByOrderID = `-- name: UpdateStatusByOrderID :exec
update "order" 
    set status = $2, updated_at = now()
    where id = $1
`

type UpdateStatusByOrderIDParams struct {
	ID     int64
	Status OrderStatusType
}

func (q *Queries) UpdateStatusByOrderID(ctx context.Context, arg UpdateStatusByOrderIDParams) error {
	_, err := q.db.Exec(ctx, updateStatusByOrderID, arg.ID, arg.Status)
	return err
}
