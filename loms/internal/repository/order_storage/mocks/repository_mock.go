// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	orderstorage "route256.ozon.ru/project/loms/internal/repository/order_storage"
)

// RepositoryMock is an autogenerated mock type for the RepositoryMock type
type RepositoryMock struct {
	mock.Mock
}

type RepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryMock) EXPECT() *RepositoryMock_Expecter {
	return &RepositoryMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, user, items
func (_m *RepositoryMock) Create(ctx context.Context, user int64, items []*orderstorage.OrderItem) (int64, error) {
	ret := _m.Called(ctx, user, items)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []*orderstorage.OrderItem) (int64, error)); ok {
		return rf(ctx, user, items)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, []*orderstorage.OrderItem) int64); ok {
		r0 = rf(ctx, user, items)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, []*orderstorage.OrderItem) error); ok {
		r1 = rf(ctx, user, items)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user int64
//   - items []*orderstorage.OrderItem
func (_e *RepositoryMock_Expecter) Create(ctx interface{}, user interface{}, items interface{}) *RepositoryMock_Create_Call {
	return &RepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, user, items)}
}

func (_c *RepositoryMock_Create_Call) Run(run func(ctx context.Context, user int64, items []*orderstorage.OrderItem)) *RepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]*orderstorage.OrderItem))
	})
	return _c
}

func (_c *RepositoryMock_Create_Call) Return(_a0 int64, _a1 error) *RepositoryMock_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryMock_Create_Call) RunAndReturn(run func(context.Context, int64, []*orderstorage.OrderItem) (int64, error)) *RepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, orderID
func (_m *RepositoryMock) GetByID(ctx context.Context, orderID int64) (*orderstorage.Order, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *orderstorage.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*orderstorage.Order, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *orderstorage.Order); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orderstorage.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type RepositoryMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID int64
func (_e *RepositoryMock_Expecter) GetByID(ctx interface{}, orderID interface{}) *RepositoryMock_GetByID_Call {
	return &RepositoryMock_GetByID_Call{Call: _e.mock.On("GetByID", ctx, orderID)}
}

func (_c *RepositoryMock_GetByID_Call) Run(run func(ctx context.Context, orderID int64)) *RepositoryMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *RepositoryMock_GetByID_Call) Return(_a0 *orderstorage.Order, _a1 error) *RepositoryMock_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryMock_GetByID_Call) RunAndReturn(run func(context.Context, int64) (*orderstorage.Order, error)) *RepositoryMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// SetStatus provides a mock function with given fields: ctx, orderID, status
func (_m *RepositoryMock) SetStatus(ctx context.Context, orderID int64, status string) error {
	ret := _m.Called(ctx, orderID, status)

	if len(ret) == 0 {
		panic("no return value specified for SetStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, orderID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepositoryMock_SetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStatus'
type RepositoryMock_SetStatus_Call struct {
	*mock.Call
}

// SetStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID int64
//   - status string
func (_e *RepositoryMock_Expecter) SetStatus(ctx interface{}, orderID interface{}, status interface{}) *RepositoryMock_SetStatus_Call {
	return &RepositoryMock_SetStatus_Call{Call: _e.mock.On("SetStatus", ctx, orderID, status)}
}

func (_c *RepositoryMock_SetStatus_Call) Run(run func(ctx context.Context, orderID int64, status string)) *RepositoryMock_SetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *RepositoryMock_SetStatus_Call) Return(_a0 error) *RepositoryMock_SetStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryMock_SetStatus_Call) RunAndReturn(run func(context.Context, int64, string) error) *RepositoryMock_SetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepositoryMock creates a new instance of RepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryMock {
	mock := &RepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
