package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	mm_orderstorage "route256.ozon.ru/project/loms/internal/repository/order_storage"
)

// RepositoryMockMock implements orderstorage.RepositoryMock
type RepositoryMockMock struct {
	t minimock.Tester

	funcCreate          func(user int64, items []*mm_orderstorage.OrderItem) (i1 int64, err error)
	inspectFuncCreate   func(user int64, items []*mm_orderstorage.OrderItem)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mRepositoryMockMockCreate

	funcGetByID          func(orderID int64) (op1 *mm_orderstorage.Order, err error)
	inspectFuncGetByID   func(orderID int64)
	afterGetByIDCounter  uint64
	beforeGetByIDCounter uint64
	GetByIDMock          mRepositoryMockMockGetByID

	funcSetStatus          func(orderID int64, status string) (err error)
	inspectFuncSetStatus   func(orderID int64, status string)
	afterSetStatusCounter  uint64
	beforeSetStatusCounter uint64
	SetStatusMock          mRepositoryMockMockSetStatus
}

// NewRepositoryMockMock returns a mock for orderstorage.RepositoryMock
func NewRepositoryMockMock(t minimock.Tester) *RepositoryMockMock {
	m := &RepositoryMockMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mRepositoryMockMockCreate{mock: m}
	m.CreateMock.callArgs = []*RepositoryMockMockCreateParams{}

	m.GetByIDMock = mRepositoryMockMockGetByID{mock: m}
	m.GetByIDMock.callArgs = []*RepositoryMockMockGetByIDParams{}

	m.SetStatusMock = mRepositoryMockMockSetStatus{mock: m}
	m.SetStatusMock.callArgs = []*RepositoryMockMockSetStatusParams{}

	return m
}

type mRepositoryMockMockCreate struct {
	mock               *RepositoryMockMock
	defaultExpectation *RepositoryMockMockCreateExpectation
	expectations       []*RepositoryMockMockCreateExpectation

	callArgs []*RepositoryMockMockCreateParams
	mutex    sync.RWMutex
}

// RepositoryMockMockCreateExpectation specifies expectation struct of the RepositoryMock.Create
type RepositoryMockMockCreateExpectation struct {
	mock    *RepositoryMockMock
	params  *RepositoryMockMockCreateParams
	results *RepositoryMockMockCreateResults
	Counter uint64
}

// RepositoryMockMockCreateParams contains parameters of the RepositoryMock.Create
type RepositoryMockMockCreateParams struct {
	user  int64
	items []*mm_orderstorage.OrderItem
}

// RepositoryMockMockCreateResults contains results of the RepositoryMock.Create
type RepositoryMockMockCreateResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for RepositoryMock.Create
func (mmCreate *mRepositoryMockMockCreate) Expect(user int64, items []*mm_orderstorage.OrderItem) *mRepositoryMockMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("RepositoryMockMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &RepositoryMockMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &RepositoryMockMockCreateParams{user, items}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the RepositoryMock.Create
func (mmCreate *mRepositoryMockMockCreate) Inspect(f func(user int64, items []*mm_orderstorage.OrderItem)) *mRepositoryMockMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for RepositoryMockMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by RepositoryMock.Create
func (mmCreate *mRepositoryMockMockCreate) Return(i1 int64, err error) *RepositoryMockMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("RepositoryMockMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &RepositoryMockMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &RepositoryMockMockCreateResults{i1, err}
	return mmCreate.mock
}

// Set uses given function f to mock the RepositoryMock.Create method
func (mmCreate *mRepositoryMockMockCreate) Set(f func(user int64, items []*mm_orderstorage.OrderItem) (i1 int64, err error)) *RepositoryMockMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the RepositoryMock.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the RepositoryMock.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the RepositoryMock.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mRepositoryMockMockCreate) When(user int64, items []*mm_orderstorage.OrderItem) *RepositoryMockMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("RepositoryMockMock.Create mock is already set by Set")
	}

	expectation := &RepositoryMockMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &RepositoryMockMockCreateParams{user, items},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up RepositoryMock.Create return parameters for the expectation previously defined by the When method
func (e *RepositoryMockMockCreateExpectation) Then(i1 int64, err error) *RepositoryMockMock {
	e.results = &RepositoryMockMockCreateResults{i1, err}
	return e.mock
}

// Create implements orderstorage.RepositoryMock
func (mmCreate *RepositoryMockMock) Create(user int64, items []*mm_orderstorage.OrderItem) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(user, items)
	}

	mm_params := &RepositoryMockMockCreateParams{user, items}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := RepositoryMockMockCreateParams{user, items}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("RepositoryMockMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the RepositoryMockMock.Create")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(user, items)
	}
	mmCreate.t.Fatalf("Unexpected call to RepositoryMockMock.Create. %v %v", user, items)
	return
}

// CreateAfterCounter returns a count of finished RepositoryMockMock.Create invocations
func (mmCreate *RepositoryMockMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of RepositoryMockMock.Create invocations
func (mmCreate *RepositoryMockMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMockMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mRepositoryMockMockCreate) Calls() []*RepositoryMockMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*RepositoryMockMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *RepositoryMockMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *RepositoryMockMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMockMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMockMock.Create")
		} else {
			m.t.Errorf("Expected call to RepositoryMockMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to RepositoryMockMock.Create")
	}
}

type mRepositoryMockMockGetByID struct {
	mock               *RepositoryMockMock
	defaultExpectation *RepositoryMockMockGetByIDExpectation
	expectations       []*RepositoryMockMockGetByIDExpectation

	callArgs []*RepositoryMockMockGetByIDParams
	mutex    sync.RWMutex
}

// RepositoryMockMockGetByIDExpectation specifies expectation struct of the RepositoryMock.GetByID
type RepositoryMockMockGetByIDExpectation struct {
	mock    *RepositoryMockMock
	params  *RepositoryMockMockGetByIDParams
	results *RepositoryMockMockGetByIDResults
	Counter uint64
}

// RepositoryMockMockGetByIDParams contains parameters of the RepositoryMock.GetByID
type RepositoryMockMockGetByIDParams struct {
	orderID int64
}

// RepositoryMockMockGetByIDResults contains results of the RepositoryMock.GetByID
type RepositoryMockMockGetByIDResults struct {
	op1 *mm_orderstorage.Order
	err error
}

// Expect sets up expected params for RepositoryMock.GetByID
func (mmGetByID *mRepositoryMockMockGetByID) Expect(orderID int64) *mRepositoryMockMockGetByID {
	if mmGetByID.mock.funcGetByID != nil {
		mmGetByID.mock.t.Fatalf("RepositoryMockMock.GetByID mock is already set by Set")
	}

	if mmGetByID.defaultExpectation == nil {
		mmGetByID.defaultExpectation = &RepositoryMockMockGetByIDExpectation{}
	}

	mmGetByID.defaultExpectation.params = &RepositoryMockMockGetByIDParams{orderID}
	for _, e := range mmGetByID.expectations {
		if minimock.Equal(e.params, mmGetByID.defaultExpectation.params) {
			mmGetByID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetByID.defaultExpectation.params)
		}
	}

	return mmGetByID
}

// Inspect accepts an inspector function that has same arguments as the RepositoryMock.GetByID
func (mmGetByID *mRepositoryMockMockGetByID) Inspect(f func(orderID int64)) *mRepositoryMockMockGetByID {
	if mmGetByID.mock.inspectFuncGetByID != nil {
		mmGetByID.mock.t.Fatalf("Inspect function is already set for RepositoryMockMock.GetByID")
	}

	mmGetByID.mock.inspectFuncGetByID = f

	return mmGetByID
}

// Return sets up results that will be returned by RepositoryMock.GetByID
func (mmGetByID *mRepositoryMockMockGetByID) Return(op1 *mm_orderstorage.Order, err error) *RepositoryMockMock {
	if mmGetByID.mock.funcGetByID != nil {
		mmGetByID.mock.t.Fatalf("RepositoryMockMock.GetByID mock is already set by Set")
	}

	if mmGetByID.defaultExpectation == nil {
		mmGetByID.defaultExpectation = &RepositoryMockMockGetByIDExpectation{mock: mmGetByID.mock}
	}
	mmGetByID.defaultExpectation.results = &RepositoryMockMockGetByIDResults{op1, err}
	return mmGetByID.mock
}

// Set uses given function f to mock the RepositoryMock.GetByID method
func (mmGetByID *mRepositoryMockMockGetByID) Set(f func(orderID int64) (op1 *mm_orderstorage.Order, err error)) *RepositoryMockMock {
	if mmGetByID.defaultExpectation != nil {
		mmGetByID.mock.t.Fatalf("Default expectation is already set for the RepositoryMock.GetByID method")
	}

	if len(mmGetByID.expectations) > 0 {
		mmGetByID.mock.t.Fatalf("Some expectations are already set for the RepositoryMock.GetByID method")
	}

	mmGetByID.mock.funcGetByID = f
	return mmGetByID.mock
}

// When sets expectation for the RepositoryMock.GetByID which will trigger the result defined by the following
// Then helper
func (mmGetByID *mRepositoryMockMockGetByID) When(orderID int64) *RepositoryMockMockGetByIDExpectation {
	if mmGetByID.mock.funcGetByID != nil {
		mmGetByID.mock.t.Fatalf("RepositoryMockMock.GetByID mock is already set by Set")
	}

	expectation := &RepositoryMockMockGetByIDExpectation{
		mock:   mmGetByID.mock,
		params: &RepositoryMockMockGetByIDParams{orderID},
	}
	mmGetByID.expectations = append(mmGetByID.expectations, expectation)
	return expectation
}

// Then sets up RepositoryMock.GetByID return parameters for the expectation previously defined by the When method
func (e *RepositoryMockMockGetByIDExpectation) Then(op1 *mm_orderstorage.Order, err error) *RepositoryMockMock {
	e.results = &RepositoryMockMockGetByIDResults{op1, err}
	return e.mock
}

// GetByID implements orderstorage.RepositoryMock
func (mmGetByID *RepositoryMockMock) GetByID(orderID int64) (op1 *mm_orderstorage.Order, err error) {
	mm_atomic.AddUint64(&mmGetByID.beforeGetByIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetByID.afterGetByIDCounter, 1)

	if mmGetByID.inspectFuncGetByID != nil {
		mmGetByID.inspectFuncGetByID(orderID)
	}

	mm_params := &RepositoryMockMockGetByIDParams{orderID}

	// Record call args
	mmGetByID.GetByIDMock.mutex.Lock()
	mmGetByID.GetByIDMock.callArgs = append(mmGetByID.GetByIDMock.callArgs, mm_params)
	mmGetByID.GetByIDMock.mutex.Unlock()

	for _, e := range mmGetByID.GetByIDMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmGetByID.GetByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetByID.GetByIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetByID.GetByIDMock.defaultExpectation.params
		mm_got := RepositoryMockMockGetByIDParams{orderID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetByID.t.Errorf("RepositoryMockMock.GetByID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetByID.GetByIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetByID.t.Fatal("No results are set for the RepositoryMockMock.GetByID")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmGetByID.funcGetByID != nil {
		return mmGetByID.funcGetByID(orderID)
	}
	mmGetByID.t.Fatalf("Unexpected call to RepositoryMockMock.GetByID. %v", orderID)
	return
}

// GetByIDAfterCounter returns a count of finished RepositoryMockMock.GetByID invocations
func (mmGetByID *RepositoryMockMock) GetByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByID.afterGetByIDCounter)
}

// GetByIDBeforeCounter returns a count of RepositoryMockMock.GetByID invocations
func (mmGetByID *RepositoryMockMock) GetByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByID.beforeGetByIDCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMockMock.GetByID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetByID *mRepositoryMockMockGetByID) Calls() []*RepositoryMockMockGetByIDParams {
	mmGetByID.mutex.RLock()

	argCopy := make([]*RepositoryMockMockGetByIDParams, len(mmGetByID.callArgs))
	copy(argCopy, mmGetByID.callArgs)

	mmGetByID.mutex.RUnlock()

	return argCopy
}

// MinimockGetByIDDone returns true if the count of the GetByID invocations corresponds
// the number of defined expectations
func (m *RepositoryMockMock) MinimockGetByIDDone() bool {
	for _, e := range m.GetByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByID != nil && mm_atomic.LoadUint64(&m.afterGetByIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetByIDInspect logs each unmet expectation
func (m *RepositoryMockMock) MinimockGetByIDInspect() {
	for _, e := range m.GetByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMockMock.GetByID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByIDCounter) < 1 {
		if m.GetByIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMockMock.GetByID")
		} else {
			m.t.Errorf("Expected call to RepositoryMockMock.GetByID with params: %#v", *m.GetByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByID != nil && mm_atomic.LoadUint64(&m.afterGetByIDCounter) < 1 {
		m.t.Error("Expected call to RepositoryMockMock.GetByID")
	}
}

type mRepositoryMockMockSetStatus struct {
	mock               *RepositoryMockMock
	defaultExpectation *RepositoryMockMockSetStatusExpectation
	expectations       []*RepositoryMockMockSetStatusExpectation

	callArgs []*RepositoryMockMockSetStatusParams
	mutex    sync.RWMutex
}

// RepositoryMockMockSetStatusExpectation specifies expectation struct of the RepositoryMock.SetStatus
type RepositoryMockMockSetStatusExpectation struct {
	mock    *RepositoryMockMock
	params  *RepositoryMockMockSetStatusParams
	results *RepositoryMockMockSetStatusResults
	Counter uint64
}

// RepositoryMockMockSetStatusParams contains parameters of the RepositoryMock.SetStatus
type RepositoryMockMockSetStatusParams struct {
	orderID int64
	status  string
}

// RepositoryMockMockSetStatusResults contains results of the RepositoryMock.SetStatus
type RepositoryMockMockSetStatusResults struct {
	err error
}

// Expect sets up expected params for RepositoryMock.SetStatus
func (mmSetStatus *mRepositoryMockMockSetStatus) Expect(orderID int64, status string) *mRepositoryMockMockSetStatus {
	if mmSetStatus.mock.funcSetStatus != nil {
		mmSetStatus.mock.t.Fatalf("RepositoryMockMock.SetStatus mock is already set by Set")
	}

	if mmSetStatus.defaultExpectation == nil {
		mmSetStatus.defaultExpectation = &RepositoryMockMockSetStatusExpectation{}
	}

	mmSetStatus.defaultExpectation.params = &RepositoryMockMockSetStatusParams{orderID, status}
	for _, e := range mmSetStatus.expectations {
		if minimock.Equal(e.params, mmSetStatus.defaultExpectation.params) {
			mmSetStatus.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetStatus.defaultExpectation.params)
		}
	}

	return mmSetStatus
}

// Inspect accepts an inspector function that has same arguments as the RepositoryMock.SetStatus
func (mmSetStatus *mRepositoryMockMockSetStatus) Inspect(f func(orderID int64, status string)) *mRepositoryMockMockSetStatus {
	if mmSetStatus.mock.inspectFuncSetStatus != nil {
		mmSetStatus.mock.t.Fatalf("Inspect function is already set for RepositoryMockMock.SetStatus")
	}

	mmSetStatus.mock.inspectFuncSetStatus = f

	return mmSetStatus
}

// Return sets up results that will be returned by RepositoryMock.SetStatus
func (mmSetStatus *mRepositoryMockMockSetStatus) Return(err error) *RepositoryMockMock {
	if mmSetStatus.mock.funcSetStatus != nil {
		mmSetStatus.mock.t.Fatalf("RepositoryMockMock.SetStatus mock is already set by Set")
	}

	if mmSetStatus.defaultExpectation == nil {
		mmSetStatus.defaultExpectation = &RepositoryMockMockSetStatusExpectation{mock: mmSetStatus.mock}
	}
	mmSetStatus.defaultExpectation.results = &RepositoryMockMockSetStatusResults{err}
	return mmSetStatus.mock
}

// Set uses given function f to mock the RepositoryMock.SetStatus method
func (mmSetStatus *mRepositoryMockMockSetStatus) Set(f func(orderID int64, status string) (err error)) *RepositoryMockMock {
	if mmSetStatus.defaultExpectation != nil {
		mmSetStatus.mock.t.Fatalf("Default expectation is already set for the RepositoryMock.SetStatus method")
	}

	if len(mmSetStatus.expectations) > 0 {
		mmSetStatus.mock.t.Fatalf("Some expectations are already set for the RepositoryMock.SetStatus method")
	}

	mmSetStatus.mock.funcSetStatus = f
	return mmSetStatus.mock
}

// When sets expectation for the RepositoryMock.SetStatus which will trigger the result defined by the following
// Then helper
func (mmSetStatus *mRepositoryMockMockSetStatus) When(orderID int64, status string) *RepositoryMockMockSetStatusExpectation {
	if mmSetStatus.mock.funcSetStatus != nil {
		mmSetStatus.mock.t.Fatalf("RepositoryMockMock.SetStatus mock is already set by Set")
	}

	expectation := &RepositoryMockMockSetStatusExpectation{
		mock:   mmSetStatus.mock,
		params: &RepositoryMockMockSetStatusParams{orderID, status},
	}
	mmSetStatus.expectations = append(mmSetStatus.expectations, expectation)
	return expectation
}

// Then sets up RepositoryMock.SetStatus return parameters for the expectation previously defined by the When method
func (e *RepositoryMockMockSetStatusExpectation) Then(err error) *RepositoryMockMock {
	e.results = &RepositoryMockMockSetStatusResults{err}
	return e.mock
}

// SetStatus implements orderstorage.RepositoryMock
func (mmSetStatus *RepositoryMockMock) SetStatus(orderID int64, status string) (err error) {
	mm_atomic.AddUint64(&mmSetStatus.beforeSetStatusCounter, 1)
	defer mm_atomic.AddUint64(&mmSetStatus.afterSetStatusCounter, 1)

	if mmSetStatus.inspectFuncSetStatus != nil {
		mmSetStatus.inspectFuncSetStatus(orderID, status)
	}

	mm_params := &RepositoryMockMockSetStatusParams{orderID, status}

	// Record call args
	mmSetStatus.SetStatusMock.mutex.Lock()
	mmSetStatus.SetStatusMock.callArgs = append(mmSetStatus.SetStatusMock.callArgs, mm_params)
	mmSetStatus.SetStatusMock.mutex.Unlock()

	for _, e := range mmSetStatus.SetStatusMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSetStatus.SetStatusMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetStatus.SetStatusMock.defaultExpectation.Counter, 1)
		mm_want := mmSetStatus.SetStatusMock.defaultExpectation.params
		mm_got := RepositoryMockMockSetStatusParams{orderID, status}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSetStatus.t.Errorf("RepositoryMockMock.SetStatus got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSetStatus.SetStatusMock.defaultExpectation.results
		if mm_results == nil {
			mmSetStatus.t.Fatal("No results are set for the RepositoryMockMock.SetStatus")
		}
		return (*mm_results).err
	}
	if mmSetStatus.funcSetStatus != nil {
		return mmSetStatus.funcSetStatus(orderID, status)
	}
	mmSetStatus.t.Fatalf("Unexpected call to RepositoryMockMock.SetStatus. %v %v", orderID, status)
	return
}

// SetStatusAfterCounter returns a count of finished RepositoryMockMock.SetStatus invocations
func (mmSetStatus *RepositoryMockMock) SetStatusAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetStatus.afterSetStatusCounter)
}

// SetStatusBeforeCounter returns a count of RepositoryMockMock.SetStatus invocations
func (mmSetStatus *RepositoryMockMock) SetStatusBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetStatus.beforeSetStatusCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMockMock.SetStatus.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetStatus *mRepositoryMockMockSetStatus) Calls() []*RepositoryMockMockSetStatusParams {
	mmSetStatus.mutex.RLock()

	argCopy := make([]*RepositoryMockMockSetStatusParams, len(mmSetStatus.callArgs))
	copy(argCopy, mmSetStatus.callArgs)

	mmSetStatus.mutex.RUnlock()

	return argCopy
}

// MinimockSetStatusDone returns true if the count of the SetStatus invocations corresponds
// the number of defined expectations
func (m *RepositoryMockMock) MinimockSetStatusDone() bool {
	for _, e := range m.SetStatusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetStatusMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetStatusCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetStatus != nil && mm_atomic.LoadUint64(&m.afterSetStatusCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetStatusInspect logs each unmet expectation
func (m *RepositoryMockMock) MinimockSetStatusInspect() {
	for _, e := range m.SetStatusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMockMock.SetStatus with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetStatusMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetStatusCounter) < 1 {
		if m.SetStatusMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMockMock.SetStatus")
		} else {
			m.t.Errorf("Expected call to RepositoryMockMock.SetStatus with params: %#v", *m.SetStatusMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetStatus != nil && mm_atomic.LoadUint64(&m.afterSetStatusCounter) < 1 {
		m.t.Error("Expected call to RepositoryMockMock.SetStatus")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RepositoryMockMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateInspect()

		m.MinimockGetByIDInspect()

		m.MinimockSetStatusInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RepositoryMockMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RepositoryMockMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockGetByIDDone() &&
		m.MinimockSetStatusDone()
}
