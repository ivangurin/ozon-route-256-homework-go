// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertOutbox = `-- name: InsertOutbox :one
insert into "kafka_outbox" ("event", entity_type, entity_id, "data") 
    values ($1, $2, $3, $4)
    returning id
`

type InsertOutboxParams struct {
	Event      pgtype.Text
	EntityType pgtype.Text
	EntityID   pgtype.Text
	Data       pgtype.Text
}

func (q *Queries) InsertOutbox(ctx context.Context, arg InsertOutboxParams) (string, error) {
	row := q.db.QueryRow(ctx, insertOutbox,
		arg.Event,
		arg.EntityType,
		arg.EntityID,
		arg.Data,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const selectOutboxMessages = `-- name: SelectOutboxMessages :many
select id, created_at, updated_at, status, error, event, entity_type, entity_id, data, trace_id, span_id 
    from "kafka_outbox"
    where status = $1
    for update skip locked
`

func (q *Queries) SelectOutboxMessages(ctx context.Context, status pgtype.Text) ([]KafkaOutbox, error) {
	rows, err := q.db.Query(ctx, selectOutboxMessages, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KafkaOutbox
	for rows.Next() {
		var i KafkaOutbox
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.Error,
			&i.Event,
			&i.EntityType,
			&i.EntityID,
			&i.Data,
			&i.TraceID,
			&i.SpanID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOutboxStatus = `-- name: UpdateOutboxStatus :exec
update "kafka_outbox"
    set status = $1,
        updated_at = now()
    where id = $2
`

type UpdateOutboxStatusParams struct {
	Status pgtype.Text
	ID     string
}

func (q *Queries) UpdateOutboxStatus(ctx context.Context, arg UpdateOutboxStatusParams) error {
	_, err := q.db.Exec(ctx, updateOutboxStatus, arg.Status, arg.ID)
	return err
}
