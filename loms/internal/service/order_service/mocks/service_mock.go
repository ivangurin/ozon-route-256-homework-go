// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "route256.ozon.ru/project/loms/internal/model"
)

// ServiceMock is an autogenerated mock type for the ServiceMock type
type ServiceMock struct {
	mock.Mock
}

type ServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceMock) EXPECT() *ServiceMock_Expecter {
	return &ServiceMock_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function with given fields: ctx, orderID
func (_m *ServiceMock) Cancel(ctx context.Context, orderID int64) error {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceMock_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type ServiceMock_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID int64
func (_e *ServiceMock_Expecter) Cancel(ctx interface{}, orderID interface{}) *ServiceMock_Cancel_Call {
	return &ServiceMock_Cancel_Call{Call: _e.mock.On("Cancel", ctx, orderID)}
}

func (_c *ServiceMock_Cancel_Call) Run(run func(ctx context.Context, orderID int64)) *ServiceMock_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ServiceMock_Cancel_Call) Return(_a0 error) *ServiceMock_Cancel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceMock_Cancel_Call) RunAndReturn(run func(context.Context, int64) error) *ServiceMock_Cancel_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, user, items
func (_m *ServiceMock) Create(ctx context.Context, user int64, items model.OrderItems) (int64, error) {
	ret := _m.Called(ctx, user, items)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, model.OrderItems) (int64, error)); ok {
		return rf(ctx, user, items)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, model.OrderItems) int64); ok {
		r0 = rf(ctx, user, items)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, model.OrderItems) error); ok {
		r1 = rf(ctx, user, items)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ServiceMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user int64
//   - items model.OrderItems
func (_e *ServiceMock_Expecter) Create(ctx interface{}, user interface{}, items interface{}) *ServiceMock_Create_Call {
	return &ServiceMock_Create_Call{Call: _e.mock.On("Create", ctx, user, items)}
}

func (_c *ServiceMock_Create_Call) Run(run func(ctx context.Context, user int64, items model.OrderItems)) *ServiceMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(model.OrderItems))
	})
	return _c
}

func (_c *ServiceMock_Create_Call) Return(_a0 int64, _a1 error) *ServiceMock_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceMock_Create_Call) RunAndReturn(run func(context.Context, int64, model.OrderItems) (int64, error)) *ServiceMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: ctx, orderID
func (_m *ServiceMock) Info(ctx context.Context, orderID int64) (*model.Order, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.Order, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Order); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceMock_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type ServiceMock_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID int64
func (_e *ServiceMock_Expecter) Info(ctx interface{}, orderID interface{}) *ServiceMock_Info_Call {
	return &ServiceMock_Info_Call{Call: _e.mock.On("Info", ctx, orderID)}
}

func (_c *ServiceMock_Info_Call) Run(run func(ctx context.Context, orderID int64)) *ServiceMock_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ServiceMock_Info_Call) Return(_a0 *model.Order, _a1 error) *ServiceMock_Info_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceMock_Info_Call) RunAndReturn(run func(context.Context, int64) (*model.Order, error)) *ServiceMock_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Pay provides a mock function with given fields: ctx, orderID
func (_m *ServiceMock) Pay(ctx context.Context, orderID int64) error {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for Pay")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceMock_Pay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pay'
type ServiceMock_Pay_Call struct {
	*mock.Call
}

// Pay is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID int64
func (_e *ServiceMock_Expecter) Pay(ctx interface{}, orderID interface{}) *ServiceMock_Pay_Call {
	return &ServiceMock_Pay_Call{Call: _e.mock.On("Pay", ctx, orderID)}
}

func (_c *ServiceMock_Pay_Call) Run(run func(ctx context.Context, orderID int64)) *ServiceMock_Pay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ServiceMock_Pay_Call) Return(_a0 error) *ServiceMock_Pay_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceMock_Pay_Call) RunAndReturn(run func(context.Context, int64) error) *ServiceMock_Pay_Call {
	_c.Call.Return(run)
	return _c
}

// NewServiceMock creates a new instance of ServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceMock {
	mock := &ServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
