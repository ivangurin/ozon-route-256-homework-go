// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ServiceMock is an autogenerated mock type for the ServiceMock type
type ServiceMock struct {
	mock.Mock
}

type ServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceMock) EXPECT() *ServiceMock_Expecter {
	return &ServiceMock_Expecter{mock: &_m.Mock}
}

// Info provides a mock function with given fields: ctx, sku
func (_m *ServiceMock) Info(ctx context.Context, sku int64) (uint16, error) {
	ret := _m.Called(ctx, sku)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 uint16
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (uint16, error)); ok {
		return rf(ctx, sku)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) uint16); ok {
		r0 = rf(ctx, sku)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, sku)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceMock_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type ServiceMock_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - ctx context.Context
//   - sku int64
func (_e *ServiceMock_Expecter) Info(ctx interface{}, sku interface{}) *ServiceMock_Info_Call {
	return &ServiceMock_Info_Call{Call: _e.mock.On("Info", ctx, sku)}
}

func (_c *ServiceMock_Info_Call) Run(run func(ctx context.Context, sku int64)) *ServiceMock_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ServiceMock_Info_Call) Return(_a0 uint16, _a1 error) *ServiceMock_Info_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceMock_Info_Call) RunAndReturn(run func(context.Context, int64) (uint16, error)) *ServiceMock_Info_Call {
	_c.Call.Return(run)
	return _c
}

// NewServiceMock creates a new instance of ServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceMock {
	mock := &ServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
